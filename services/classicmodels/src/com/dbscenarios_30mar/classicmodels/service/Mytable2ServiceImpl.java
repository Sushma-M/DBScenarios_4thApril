/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.classicmodels.*;


/**
 * ServiceImpl object for domain model class Mytable2.
 * @see com.dbscenarios_30mar.classicmodels.Mytable2
 */
@Service("classicmodels.Mytable2Service")
public class Mytable2ServiceImpl implements Mytable2Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Mytable2ServiceImpl.class);

    @Autowired
    @Qualifier("classicmodels.Mytable2Dao")
    private WMGenericDao<Mytable2, Mytable2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Mytable2, Mytable2Id> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
     public Page<Mytable2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Mytable2 create(Mytable2 mytable2) {
        LOGGER.debug("Creating a new mytable2 with information: {}" , mytable2);
        return this.wmGenericDao.create(mytable2);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Mytable2 delete(Mytable2Id mytable2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting mytable2 with id: {}" , mytable2Id);
        Mytable2 deleted = this.wmGenericDao.findById(mytable2Id);
        if (deleted == null) {
            LOGGER.debug("No mytable2 found with id: {}" , mytable2Id);
            throw new EntityNotFoundException(String.valueOf(mytable2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all mytable2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable2> findAll(Pageable pageable) {
        LOGGER.debug("Finding all mytable2s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Mytable2 findById(Mytable2Id id) throws EntityNotFoundException {
        LOGGER.debug("Finding mytable2 by id: {}" , id);
        Mytable2 mytable2=this.wmGenericDao.findById(id);
        if(mytable2==null){
            LOGGER.debug("No mytable2 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return mytable2;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Mytable2 update(Mytable2 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating mytable2 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Mytable2Id id = new Mytable2Id();
        id.setId(updated.getId());
        id.setCol1(updated.getCol1());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


