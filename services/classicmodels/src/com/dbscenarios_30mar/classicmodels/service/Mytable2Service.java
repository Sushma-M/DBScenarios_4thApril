/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.classicmodels.*;

/**
 * Service object for domain model class Mytable2.
 * @see com.dbscenarios_30mar.classicmodels.Mytable2
 */

public interface Mytable2Service {
   /**
	 * Creates a new mytable2.
	 * 
	 * @param created
	 *            The information of the created mytable2.
	 * @return The created mytable2.
	 */
	public Mytable2 create(Mytable2 created);

	/**
	 * Deletes a mytable2.
	 * 
	 * @param mytable2Id
	 *            The id of the deleted mytable2.
	 * @return The deleted mytable2.
	 * @throws EntityNotFoundException
	 *             if no mytable2 is found with the given id.
	 */
	public Mytable2 delete(Mytable2Id mytable2Id) throws EntityNotFoundException;

	/**
	 * Finds all mytable2s.
	 * 
	 * @return A list of mytable2s.
	 */
	public Page<Mytable2> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Mytable2> findAll(Pageable pageable);
	
	/**
	 * Finds mytable2 by id.
	 * 
	 * @param id
	 *            The id of the wanted mytable2.
	 * @return The found mytable2. If no mytable2 is found, this method returns
	 *         null.
	 */
	public Mytable2 findById(Mytable2Id id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a mytable2.
	 * 
	 * @param updated
	 *            The information of the updated mytable2.
	 * @return The updated mytable2.
	 * @throws EntityNotFoundException
	 *             if no mytable2 is found with given id.
	 */
	public Mytable2 update(Mytable2 updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the mytable2s in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the mytable2.
	 */

	public long countAll();


    public Page<Mytable2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

