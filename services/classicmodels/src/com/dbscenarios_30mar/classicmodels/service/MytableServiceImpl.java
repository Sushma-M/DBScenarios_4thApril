/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.classicmodels.*;


/**
 * ServiceImpl object for domain model class Mytable.
 * @see com.dbscenarios_30mar.classicmodels.Mytable
 */
@Service("classicmodels.MytableService")
public class MytableServiceImpl implements MytableService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MytableServiceImpl.class);

    @Autowired
    @Qualifier("classicmodels.MytableDao")
    private WMGenericDao<Mytable, MytableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Mytable, MytableId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
     public Page<Mytable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Mytable create(Mytable mytable) {
        LOGGER.debug("Creating a new mytable with information: {}" , mytable);
        return this.wmGenericDao.create(mytable);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Mytable delete(MytableId mytableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting mytable with id: {}" , mytableId);
        Mytable deleted = this.wmGenericDao.findById(mytableId);
        if (deleted == null) {
            LOGGER.debug("No mytable found with id: {}" , mytableId);
            throw new EntityNotFoundException(String.valueOf(mytableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all mytables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Mytable> findAll(Pageable pageable) {
        LOGGER.debug("Finding all mytables");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Mytable findById(MytableId id) throws EntityNotFoundException {
        LOGGER.debug("Finding mytable by id: {}" , id);
        Mytable mytable=this.wmGenericDao.findById(id);
        if(mytable==null){
            LOGGER.debug("No mytable found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return mytable;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Mytable update(Mytable updated) throws EntityNotFoundException {
        LOGGER.debug("Updating mytable with information: {}" , updated);
        this.wmGenericDao.update(updated);

        MytableId id = new MytableId();
        id.setColumnA(updated.getColumnA());
        id.setColumnB(updated.getColumnB());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


