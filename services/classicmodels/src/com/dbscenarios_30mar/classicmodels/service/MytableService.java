/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.classicmodels.*;

/**
 * Service object for domain model class Mytable.
 * @see com.dbscenarios_30mar.classicmodels.Mytable
 */

public interface MytableService {
   /**
	 * Creates a new mytable.
	 * 
	 * @param created
	 *            The information of the created mytable.
	 * @return The created mytable.
	 */
	public Mytable create(Mytable created);

	/**
	 * Deletes a mytable.
	 * 
	 * @param mytableId
	 *            The id of the deleted mytable.
	 * @return The deleted mytable.
	 * @throws EntityNotFoundException
	 *             if no mytable is found with the given id.
	 */
	public Mytable delete(MytableId mytableId) throws EntityNotFoundException;

	/**
	 * Finds all mytables.
	 * 
	 * @return A list of mytables.
	 */
	public Page<Mytable> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Mytable> findAll(Pageable pageable);
	
	/**
	 * Finds mytable by id.
	 * 
	 * @param id
	 *            The id of the wanted mytable.
	 * @return The found mytable. If no mytable is found, this method returns
	 *         null.
	 */
	public Mytable findById(MytableId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a mytable.
	 * 
	 * @param updated
	 *            The information of the updated mytable.
	 * @return The updated mytable.
	 * @throws EntityNotFoundException
	 *             if no mytable is found with given id.
	 */
	public Mytable update(Mytable updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the mytables in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the mytable.
	 */

	public long countAll();


    public Page<Mytable> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

