/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.classicmodels.service.CustomersService;
import com.dbscenarios_30mar.classicmodels.service.OrdersService;
import com.dbscenarios_30mar.classicmodels.service.PaymentsService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.classicmodels.*;
import com.dbscenarios_30mar.classicmodels.service.*;


/**
 * Controller object for domain model class Customers.
 * @see com.dbscenarios_30mar.classicmodels.Customers
 */

@RestController(value = "Classicmodels.CustomersController")
@Api(value = "/classicmodels/Customers", description = "Exposes APIs to work with Customers resource.")
@RequestMapping("/classicmodels/Customers")
public class CustomersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomersController.class);

	@Autowired
	@Qualifier("classicmodels.CustomersService")
	private CustomersService customersService;


    @Autowired
    @Qualifier("classicmodels.OrdersService")
    private OrdersService ordersService;


    @Autowired
    @Qualifier("classicmodels.PaymentsService")
    private PaymentsService paymentsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Customers instances matching the search criteria.")
	public Page<Customers> findCustomerss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Customerss list");
		return customersService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Customers instances.")
	public Page<Customers> getCustomerss(Pageable pageable) {
		LOGGER.debug("Rendering Customerss list");
		return customersService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Customers instances.")
	public Long countAllCustomerss() {
		LOGGER.debug("counting Customerss");
		Long count = customersService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Customers instance associated with the given id.")
    public Customers getCustomers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Customers with id: {}" , id);
        Customers instance = customersService.findById(id);
        LOGGER.debug("Customers details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Customers instance associated with the given id.")
    public boolean deleteCustomers(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customers with id: {}" , id);
        Customers deleted = customersService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Customers instance associated with the given id.")
    public Customers editCustomers(@PathVariable("id") Integer id, @RequestBody Customers instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Customers with id: {}" , instance.getCustomerNumber());
        instance.setCustomerNumber(id);
        instance = customersService.update(instance);
        LOGGER.debug("Customers details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/paymentses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the paymentses instance associated with the given id.")
     public Page<Payments> findAssociatedpaymentses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated paymentses");
        return paymentsService.findAssociatedValues(id,"customers","customerNumber", pageable);
   }

    @RequestMapping(value="/{id:.+}/orderses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the orderses instance associated with the given id.")
     public Page<Orders> findAssociatedorderses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated orderses");
        return ordersService.findAssociatedValues(id,"customers","customerNumber", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Customers instance.")
	public Customers createCustomers(@RequestBody Customers instance) {
		LOGGER.debug("Create Customers with information: {}" , instance);
		instance = customersService.create(instance);
		LOGGER.debug("Created Customers with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCustomersService(CustomersService service) {
		this.customersService = service;
	}
}

