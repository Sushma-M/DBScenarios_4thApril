/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.classicmodels.service.ArticleTagsService;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.classicmodels.*;
import com.dbscenarios_30mar.classicmodels.service.*;


/**
 * Controller object for domain model class ArticleTags.
 * @see com.dbscenarios_30mar.classicmodels.ArticleTags
 */

@RestController(value = "Classicmodels.ArticleTagsController")
@Api(value = "/classicmodels/ArticleTags", description = "Exposes APIs to work with ArticleTags resource.")
@RequestMapping("/classicmodels/ArticleTags")
public class ArticleTagsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArticleTagsController.class);

	@Autowired
	@Qualifier("classicmodels.ArticleTagsService")
	private ArticleTagsService articleTagsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ArticleTags instances matching the search criteria.")
	public Page<ArticleTags> findArticleTagss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ArticleTagss list");
		return articleTagsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ArticleTags instances.")
	public Page<ArticleTags> getArticleTagss(Pageable pageable) {
		LOGGER.debug("Rendering ArticleTagss list");
		return articleTagsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ArticleTags instances.")
	public Long countAllArticleTagss() {
		LOGGER.debug("counting ArticleTagss");
		Long count = articleTagsService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the ArticleTags instance associated with the given composite-id.")
	public ArticleTags getArticleTags( @RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId)
	 throws EntityNotFoundException {
	    ArticleTagsId temp = new ArticleTagsId();
	    temp.setArticleId(articleId);
	    temp.setTagId(tagId);
		LOGGER.debug("Getting ArticleTags with id: {}" , temp);
		ArticleTags instance = articleTagsService.findById(temp);
		LOGGER.debug("ArticleTags details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the ArticleTags instance associated with the given composite-id.")
	public boolean deleteArticleTags( @RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId)throws EntityNotFoundException {
	    ArticleTagsId temp = new ArticleTagsId();
        temp.setArticleId(articleId);
        temp.setTagId(tagId);
		LOGGER.debug("Deleting ArticleTags with id: {}" , temp);
		ArticleTags deleted = articleTagsService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the ArticleTags instance associated with the given composite-id.")
	public ArticleTags editArticleTags( @RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId, @RequestBody ArticleTags instance) throws EntityNotFoundException {
	    ArticleTagsId temp = new ArticleTagsId();
         temp.setArticleId(articleId);
         temp.setTagId(tagId);
        articleTagsService.delete(temp);
        instance = articleTagsService.create(instance);
	    LOGGER.debug("ArticleTags details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ArticleTags instance.")
	public ArticleTags createArticleTags(@RequestBody ArticleTags instance) {
		LOGGER.debug("Create ArticleTags with information: {}" , instance);
		instance = articleTagsService.create(instance);
		LOGGER.debug("Created ArticleTags with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setArticleTagsService(ArticleTagsService service) {
		this.articleTagsService = service;
	}
}

