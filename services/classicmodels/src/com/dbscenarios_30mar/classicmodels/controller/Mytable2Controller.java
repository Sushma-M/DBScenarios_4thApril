/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.classicmodels.service.Mytable2Service;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.classicmodels.*;
import com.dbscenarios_30mar.classicmodels.service.*;


/**
 * Controller object for domain model class Mytable2.
 * @see com.dbscenarios_30mar.classicmodels.Mytable2
 */

@RestController(value = "Classicmodels.Mytable2Controller")
@Api(value = "/classicmodels/Mytable2", description = "Exposes APIs to work with Mytable2 resource.")
@RequestMapping("/classicmodels/Mytable2")
public class Mytable2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Mytable2Controller.class);

	@Autowired
	@Qualifier("classicmodels.Mytable2Service")
	private Mytable2Service mytable2Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Mytable2 instances matching the search criteria.")
	public Page<Mytable2> findMytable2s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Mytable2s list");
		return mytable2Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Mytable2 instances.")
	public Page<Mytable2> getMytable2s(Pageable pageable) {
		LOGGER.debug("Rendering Mytable2s list");
		return mytable2Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Mytable2 instances.")
	public Long countAllMytable2s() {
		LOGGER.debug("counting Mytable2s");
		Long count = mytable2Service.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the Mytable2 instance associated with the given composite-id.")
	public Mytable2 getMytable2( @RequestParam("id") Integer id, @RequestParam("col1") Integer col1)
	 throws EntityNotFoundException {
	    Mytable2Id temp = new Mytable2Id();
	    temp.setId(id);
	    temp.setCol1(col1);
		LOGGER.debug("Getting Mytable2 with id: {}" , temp);
		Mytable2 instance = mytable2Service.findById(temp);
		LOGGER.debug("Mytable2 details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the Mytable2 instance associated with the given composite-id.")
	public boolean deleteMytable2( @RequestParam("id") Integer id, @RequestParam("col1") Integer col1)throws EntityNotFoundException {
	    Mytable2Id temp = new Mytable2Id();
        temp.setId(id);
        temp.setCol1(col1);
		LOGGER.debug("Deleting Mytable2 with id: {}" , temp);
		Mytable2 deleted = mytable2Service.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the Mytable2 instance associated with the given composite-id.")
	public Mytable2 editMytable2( @RequestParam("id") Integer id, @RequestParam("col1") Integer col1, @RequestBody Mytable2 instance) throws EntityNotFoundException {
	    Mytable2Id temp = new Mytable2Id();
         temp.setId(id);
         temp.setCol1(col1);
        mytable2Service.delete(temp);
        instance = mytable2Service.create(instance);
	    LOGGER.debug("Mytable2 details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Mytable2 instance.")
	public Mytable2 createMytable2(@RequestBody Mytable2 instance) {
		LOGGER.debug("Create Mytable2 with information: {}" , instance);
		instance = mytable2Service.create(instance);
		LOGGER.debug("Created Mytable2 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setMytable2Service(Mytable2Service service) {
		this.mytable2Service = service;
	}
}

