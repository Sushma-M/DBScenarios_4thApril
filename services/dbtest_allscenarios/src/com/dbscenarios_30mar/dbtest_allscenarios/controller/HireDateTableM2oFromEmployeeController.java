/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.EmployeeRelationFrom2tablesService;
import com.dbscenarios_30mar.dbtest_allscenarios.service.HireDateTableM2oFromEmployeeService;
import java.util.Date;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class HireDateTableM2oFromEmployee.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.HireDateTableM2oFromEmployee
 */

@RestController(value = "Dbtest_allscenarios.HireDateTableM2oFromEmployeeController")
@Api(value = "/dbtest_allscenarios/HireDateTableM2oFromEmployee", description = "Exposes APIs to work with HireDateTableM2oFromEmployee resource.")
@RequestMapping("/dbtest_allscenarios/HireDateTableM2oFromEmployee")
public class HireDateTableM2oFromEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HireDateTableM2oFromEmployeeController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.HireDateTableM2oFromEmployeeService")
	private HireDateTableM2oFromEmployeeService hireDateTableM2oFromEmployeeService;


    @Autowired
    @Qualifier("dbtest_allscenarios.EmployeeRelationFrom2tablesService")
    private EmployeeRelationFrom2tablesService employeeRelationFrom2tablesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of HireDateTableM2oFromEmployee instances matching the search criteria.")
	public Page<HireDateTableM2oFromEmployee> findHireDateTableM2oFromEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering HireDateTableM2oFromEmployees list");
		return hireDateTableM2oFromEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of HireDateTableM2oFromEmployee instances.")
	public Page<HireDateTableM2oFromEmployee> getHireDateTableM2oFromEmployees(Pageable pageable) {
		LOGGER.debug("Rendering HireDateTableM2oFromEmployees list");
		return hireDateTableM2oFromEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of HireDateTableM2oFromEmployee instances.")
	public Long countAllHireDateTableM2oFromEmployees() {
		LOGGER.debug("counting HireDateTableM2oFromEmployees");
		Long count = hireDateTableM2oFromEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the HireDateTableM2oFromEmployee instance associated with the given id.")
    public HireDateTableM2oFromEmployee getHireDateTableM2oFromEmployee(@PathVariable("id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting HireDateTableM2oFromEmployee with id: {}" , id);
        HireDateTableM2oFromEmployee instance = hireDateTableM2oFromEmployeeService.findById(id);
        LOGGER.debug("HireDateTableM2oFromEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the HireDateTableM2oFromEmployee instance associated with the given id.")
    public boolean deleteHireDateTableM2oFromEmployee(@PathVariable("id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting HireDateTableM2oFromEmployee with id: {}" , id);
        HireDateTableM2oFromEmployee deleted = hireDateTableM2oFromEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the HireDateTableM2oFromEmployee instance associated with the given id.")
    public HireDateTableM2oFromEmployee editHireDateTableM2oFromEmployee(@PathVariable("id") Date id, @RequestBody HireDateTableM2oFromEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing HireDateTableM2oFromEmployee with id: {}" , instance.getId());
        instance.setId(id);
        instance = hireDateTableM2oFromEmployeeService.update(instance);
        LOGGER.debug("HireDateTableM2oFromEmployee details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeRelationFrom2tableses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeRelationFrom2tableses instance associated with the given id.")
     public Page<EmployeeRelationFrom2tables> findAssociatedemployeeRelationFrom2tableses(Pageable pageable, @PathVariable("id") Date id){
        LOGGER.debug("Fetching all associated employeeRelationFrom2tableses");
        return employeeRelationFrom2tablesService.findAssociatedValues(id,"hireDateTableM2oFromEmployee","id", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new HireDateTableM2oFromEmployee instance.")
	public HireDateTableM2oFromEmployee createHireDateTableM2oFromEmployee(@RequestBody HireDateTableM2oFromEmployee instance) {
		LOGGER.debug("Create HireDateTableM2oFromEmployee with information: {}" , instance);
		instance = hireDateTableM2oFromEmployeeService.create(instance);
		LOGGER.debug("Created HireDateTableM2oFromEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setHireDateTableM2oFromEmployeeService(HireDateTableM2oFromEmployeeService service) {
		this.hireDateTableM2oFromEmployeeService = service;
	}
}

