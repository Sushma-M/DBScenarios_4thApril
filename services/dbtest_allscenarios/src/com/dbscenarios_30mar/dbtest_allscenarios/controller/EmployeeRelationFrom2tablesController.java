/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.CompositesKeyRelationsService;
import com.dbscenarios_30mar.dbtest_allscenarios.service.EmployeeRelationFrom2tablesService;
import com.dbscenarios_30mar.dbtest_allscenarios.service.PersonPhoneO2oM2oService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class EmployeeRelationFrom2tables.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.EmployeeRelationFrom2tables
 */

@RestController(value = "Dbtest_allscenarios.EmployeeRelationFrom2tablesController")
@Api(value = "/dbtest_allscenarios/EmployeeRelationFrom2tables", description = "Exposes APIs to work with EmployeeRelationFrom2tables resource.")
@RequestMapping("/dbtest_allscenarios/EmployeeRelationFrom2tables")
public class EmployeeRelationFrom2tablesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeRelationFrom2tablesController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.EmployeeRelationFrom2tablesService")
	private EmployeeRelationFrom2tablesService employeeRelationFrom2tablesService;


    @Autowired
    @Qualifier("dbtest_allscenarios.PersonPhoneO2oM2oService")
    private PersonPhoneO2oM2oService personPhoneO2oM2oService;


    @Autowired
    @Qualifier("dbtest_allscenarios.CompositesKeyRelationsService")
    private CompositesKeyRelationsService compositesKeyRelationsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeRelationFrom2tables instances matching the search criteria.")
	public Page<EmployeeRelationFrom2tables> findEmployeeRelationFrom2tabless( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeRelationFrom2tabless list");
		return employeeRelationFrom2tablesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeRelationFrom2tables instances.")
	public Page<EmployeeRelationFrom2tables> getEmployeeRelationFrom2tabless(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeRelationFrom2tabless list");
		return employeeRelationFrom2tablesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeRelationFrom2tables instances.")
	public Long countAllEmployeeRelationFrom2tabless() {
		LOGGER.debug("counting EmployeeRelationFrom2tabless");
		Long count = employeeRelationFrom2tablesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeRelationFrom2tables instance associated with the given id.")
    public EmployeeRelationFrom2tables getEmployeeRelationFrom2tables(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeRelationFrom2tables with id: {}" , id);
        EmployeeRelationFrom2tables instance = employeeRelationFrom2tablesService.findById(id);
        LOGGER.debug("EmployeeRelationFrom2tables details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeRelationFrom2tables instance associated with the given id.")
    public boolean deleteEmployeeRelationFrom2tables(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeRelationFrom2tables with id: {}" , id);
        EmployeeRelationFrom2tables deleted = employeeRelationFrom2tablesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeRelationFrom2tables instance associated with the given id.")
    public EmployeeRelationFrom2tables editEmployeeRelationFrom2tables(@PathVariable("id") Integer id, @RequestBody EmployeeRelationFrom2tables instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeRelationFrom2tables with id: {}" , instance.getBusinessEntityId());
        instance.setBusinessEntityId(id);
        instance = employeeRelationFrom2tablesService.update(instance);
        LOGGER.debug("EmployeeRelationFrom2tables details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/personPhoneO2oM2os", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personPhoneO2oM2os instance associated with the given id.")
     public Page<PersonPhoneO2oM2o> findAssociatedpersonPhoneO2oM2os(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated personPhoneO2oM2os");
        return personPhoneO2oM2oService.findAssociatedValues(id,"employeeRelationFrom2tables","businessEntityId", pageable);
   }

    @RequestMapping(value="/{id:.+}/compositesKeyRelationses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compositesKeyRelationses instance associated with the given id.")
     public Page<CompositesKeyRelations> findAssociatedcompositesKeyRelationses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated compositesKeyRelationses");
        return compositesKeyRelationsService.findAssociatedValues(id,"employeeRelationFrom2tables","businessEntityId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeRelationFrom2tables instance.")
	public EmployeeRelationFrom2tables createEmployeeRelationFrom2tables(@RequestBody EmployeeRelationFrom2tables instance) {
		LOGGER.debug("Create EmployeeRelationFrom2tables with information: {}" , instance);
		instance = employeeRelationFrom2tablesService.create(instance);
		LOGGER.debug("Created EmployeeRelationFrom2tables with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeRelationFrom2tablesService(EmployeeRelationFrom2tablesService service) {
		this.employeeRelationFrom2tablesService = service;
	}
}

