/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.Composites1Service;
import com.dbscenarios_30mar.dbtest_allscenarios.service.Composites2Service;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class Composites2.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Composites2
 */

@RestController(value = "Dbtest_allscenarios.Composites2Controller")
@Api(value = "/dbtest_allscenarios/Composites2", description = "Exposes APIs to work with Composites2 resource.")
@RequestMapping("/dbtest_allscenarios/Composites2")
public class Composites2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Composites2Controller.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.Composites2Service")
	private Composites2Service composites2Service;


    @Autowired
    @Qualifier("dbtest_allscenarios.Composites1Service")
    private Composites1Service composites1Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Composites2 instances matching the search criteria.")
	public Page<Composites2> findComposites2s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Composites2s list");
		return composites2Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Composites2 instances.")
	public Page<Composites2> getComposites2s(Pageable pageable) {
		LOGGER.debug("Rendering Composites2s list");
		return composites2Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Composites2 instances.")
	public Long countAllComposites2s() {
		LOGGER.debug("counting Composites2s");
		Long count = composites2Service.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the Composites2 instance associated with the given composite-id.")
	public Composites2 getComposites2( @RequestParam("dateCol") Date dateCol, @RequestParam("id") Integer id)
	 throws EntityNotFoundException {
	    Composites2Id temp = new Composites2Id();
	    temp.setDateCol(dateCol);
	    temp.setId(id);
		LOGGER.debug("Getting Composites2 with id: {}" , temp);
		Composites2 instance = composites2Service.findById(temp);
		LOGGER.debug("Composites2 details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the Composites2 instance associated with the given composite-id.")
	public boolean deleteComposites2( @RequestParam("dateCol") Date dateCol, @RequestParam("id") Integer id)throws EntityNotFoundException {
	    Composites2Id temp = new Composites2Id();
        temp.setDateCol(dateCol);
        temp.setId(id);
		LOGGER.debug("Deleting Composites2 with id: {}" , temp);
		Composites2 deleted = composites2Service.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the Composites2 instance associated with the given composite-id.")
	public Composites2 editComposites2( @RequestParam("dateCol") Date dateCol, @RequestParam("id") Integer id, @RequestBody Composites2 instance) throws EntityNotFoundException {
	    Composites2Id temp = new Composites2Id();
         temp.setDateCol(dateCol);
         temp.setId(id);
        composites2Service.delete(temp);
        instance = composites2Service.create(instance);
	    LOGGER.debug("Composites2 details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Composites2 instance.")
	public Composites2 createComposites2(@RequestBody Composites2 instance) {
		LOGGER.debug("Create Composites2 with information: {}" , instance);
		instance = composites2Service.create(instance);
		LOGGER.debug("Created Composites2 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setComposites2Service(Composites2Service service) {
		this.composites2Service = service;
	}
}

