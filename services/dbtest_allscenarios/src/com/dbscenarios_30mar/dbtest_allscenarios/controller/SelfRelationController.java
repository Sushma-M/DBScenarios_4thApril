/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.SelfRelationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class SelfRelation.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.SelfRelation
 */

@RestController(value = "Dbtest_allscenarios.SelfRelationController")
@Api(value = "/dbtest_allscenarios/SelfRelation", description = "Exposes APIs to work with SelfRelation resource.")
@RequestMapping("/dbtest_allscenarios/SelfRelation")
public class SelfRelationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SelfRelationController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.SelfRelationService")
	private SelfRelationService selfRelationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SelfRelation instances matching the search criteria.")
	public Page<SelfRelation> findSelfRelations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SelfRelations list");
		return selfRelationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SelfRelation instances.")
	public Page<SelfRelation> getSelfRelations(Pageable pageable) {
		LOGGER.debug("Rendering SelfRelations list");
		return selfRelationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SelfRelation instances.")
	public Long countAllSelfRelations() {
		LOGGER.debug("counting SelfRelations");
		Long count = selfRelationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SelfRelation instance associated with the given id.")
    public SelfRelation getSelfRelation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SelfRelation with id: {}" , id);
        SelfRelation instance = selfRelationService.findById(id);
        LOGGER.debug("SelfRelation details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SelfRelation instance associated with the given id.")
    public boolean deleteSelfRelation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SelfRelation with id: {}" , id);
        SelfRelation deleted = selfRelationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SelfRelation instance associated with the given id.")
    public SelfRelation editSelfRelation(@PathVariable("id") Integer id, @RequestBody SelfRelation instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SelfRelation with id: {}" , instance.getId());
        instance.setId(id);
        instance = selfRelationService.update(instance);
        LOGGER.debug("SelfRelation details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/selfRelationsForIntCol", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the selfRelationsForIntCol instance associated with the given id.")
     public Page<SelfRelation> findAssociatedselfRelationsForIntCol(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated selfRelationsForIntCol");
        return selfRelationService.findAssociatedValues(id,"selfRelationByIntCol","id", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SelfRelation instance.")
	public SelfRelation createSelfRelation(@RequestBody SelfRelation instance) {
		LOGGER.debug("Create SelfRelation with information: {}" , instance);
		instance = selfRelationService.create(instance);
		LOGGER.debug("Created SelfRelation with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSelfRelationService(SelfRelationService service) {
		this.selfRelationService = service;
	}
}

