/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.AddressM1SpService;
import com.dbscenarios_30mar.dbtest_allscenarios.service.StateProvinceM2oAddressService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class StateProvinceM2oAddress.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.StateProvinceM2oAddress
 */

@RestController(value = "Dbtest_allscenarios.StateProvinceM2oAddressController")
@Api(value = "/dbtest_allscenarios/StateProvinceM2oAddress", description = "Exposes APIs to work with StateProvinceM2oAddress resource.")
@RequestMapping("/dbtest_allscenarios/StateProvinceM2oAddress")
public class StateProvinceM2oAddressController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StateProvinceM2oAddressController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.StateProvinceM2oAddressService")
	private StateProvinceM2oAddressService stateProvinceM2oAddressService;


    @Autowired
    @Qualifier("dbtest_allscenarios.AddressM1SpService")
    private AddressM1SpService addressM1SpService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of StateProvinceM2oAddress instances matching the search criteria.")
	public Page<StateProvinceM2oAddress> findStateProvinceM2oAddresss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering StateProvinceM2oAddresss list");
		return stateProvinceM2oAddressService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of StateProvinceM2oAddress instances.")
	public Page<StateProvinceM2oAddress> getStateProvinceM2oAddresss(Pageable pageable) {
		LOGGER.debug("Rendering StateProvinceM2oAddresss list");
		return stateProvinceM2oAddressService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of StateProvinceM2oAddress instances.")
	public Long countAllStateProvinceM2oAddresss() {
		LOGGER.debug("counting StateProvinceM2oAddresss");
		Long count = stateProvinceM2oAddressService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the StateProvinceM2oAddress instance associated with the given id.")
    public StateProvinceM2oAddress getStateProvinceM2oAddress(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting StateProvinceM2oAddress with id: {}" , id);
        StateProvinceM2oAddress instance = stateProvinceM2oAddressService.findById(id);
        LOGGER.debug("StateProvinceM2oAddress details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the StateProvinceM2oAddress instance associated with the given id.")
    public boolean deleteStateProvinceM2oAddress(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StateProvinceM2oAddress with id: {}" , id);
        StateProvinceM2oAddress deleted = stateProvinceM2oAddressService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the StateProvinceM2oAddress instance associated with the given id.")
    public StateProvinceM2oAddress editStateProvinceM2oAddress(@PathVariable("id") Integer id, @RequestBody StateProvinceM2oAddress instance) throws EntityNotFoundException {
        LOGGER.debug("Editing StateProvinceM2oAddress with id: {}" , instance.getStateProvinceId());
        instance.setStateProvinceId(id);
        instance = stateProvinceM2oAddressService.update(instance);
        LOGGER.debug("StateProvinceM2oAddress details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/addressM1Sps", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the addressM1Sps instance associated with the given id.")
     public Page<AddressM1Sp> findAssociatedaddressM1Sps(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated addressM1Sps");
        return addressM1SpService.findAssociatedValues(id,"stateProvinceM2oAddress","stateProvinceId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new StateProvinceM2oAddress instance.")
	public StateProvinceM2oAddress createStateProvinceM2oAddress(@RequestBody StateProvinceM2oAddress instance) {
		LOGGER.debug("Create StateProvinceM2oAddress with information: {}" , instance);
		instance = stateProvinceM2oAddressService.create(instance);
		LOGGER.debug("Created StateProvinceM2oAddress with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setStateProvinceM2oAddressService(StateProvinceM2oAddressService service) {
		this.stateProvinceM2oAddressService = service;
	}
}

