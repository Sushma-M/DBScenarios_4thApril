/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.CompositesKeyRelationsService;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class CompositesKeyRelations.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.CompositesKeyRelations
 */

@RestController(value = "Dbtest_allscenarios.CompositesKeyRelationsController")
@Api(value = "/dbtest_allscenarios/CompositesKeyRelations", description = "Exposes APIs to work with CompositesKeyRelations resource.")
@RequestMapping("/dbtest_allscenarios/CompositesKeyRelations")
public class CompositesKeyRelationsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositesKeyRelationsController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.CompositesKeyRelationsService")
	private CompositesKeyRelationsService compositesKeyRelationsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of CompositesKeyRelations instances matching the search criteria.")
	public Page<CompositesKeyRelations> findCompositesKeyRelationss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering CompositesKeyRelationss list");
		return compositesKeyRelationsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of CompositesKeyRelations instances.")
	public Page<CompositesKeyRelations> getCompositesKeyRelationss(Pageable pageable) {
		LOGGER.debug("Rendering CompositesKeyRelationss list");
		return compositesKeyRelationsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of CompositesKeyRelations instances.")
	public Long countAllCompositesKeyRelationss() {
		LOGGER.debug("counting CompositesKeyRelationss");
		Long count = compositesKeyRelationsService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the CompositesKeyRelations instance associated with the given composite-id.")
	public CompositesKeyRelations getCompositesKeyRelations( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("shiftId") Short shiftId, @RequestParam("departmentId") Short departmentId)
	 throws EntityNotFoundException {
	    CompositesKeyRelationsId temp = new CompositesKeyRelationsId();
	    temp.setBusinessEntityId(businessEntityId);
	    temp.setShiftId(shiftId);
	    temp.setDepartmentId(departmentId);
		LOGGER.debug("Getting CompositesKeyRelations with id: {}" , temp);
		CompositesKeyRelations instance = compositesKeyRelationsService.findById(temp);
		LOGGER.debug("CompositesKeyRelations details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the CompositesKeyRelations instance associated with the given composite-id.")
	public boolean deleteCompositesKeyRelations( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("shiftId") Short shiftId, @RequestParam("departmentId") Short departmentId)throws EntityNotFoundException {
	    CompositesKeyRelationsId temp = new CompositesKeyRelationsId();
        temp.setBusinessEntityId(businessEntityId);
        temp.setShiftId(shiftId);
        temp.setDepartmentId(departmentId);
		LOGGER.debug("Deleting CompositesKeyRelations with id: {}" , temp);
		CompositesKeyRelations deleted = compositesKeyRelationsService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the CompositesKeyRelations instance associated with the given composite-id.")
	public CompositesKeyRelations editCompositesKeyRelations( @RequestParam("businessEntityId") Integer businessEntityId, @RequestParam("shiftId") Short shiftId, @RequestParam("departmentId") Short departmentId, @RequestBody CompositesKeyRelations instance) throws EntityNotFoundException {
	    CompositesKeyRelationsId temp = new CompositesKeyRelationsId();
         temp.setBusinessEntityId(businessEntityId);
         temp.setShiftId(shiftId);
         temp.setDepartmentId(departmentId);
        compositesKeyRelationsService.delete(temp);
        instance = compositesKeyRelationsService.create(instance);
	    LOGGER.debug("CompositesKeyRelations details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new CompositesKeyRelations instance.")
	public CompositesKeyRelations createCompositesKeyRelations(@RequestBody CompositesKeyRelations instance) {
		LOGGER.debug("Create CompositesKeyRelations with information: {}" , instance);
		instance = compositesKeyRelationsService.create(instance);
		LOGGER.debug("Created CompositesKeyRelations with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCompositesKeyRelationsService(CompositesKeyRelationsService service) {
		this.compositesKeyRelationsService = service;
	}
}

