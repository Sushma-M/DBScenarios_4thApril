/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.CompositesKeyRelationsService;
import com.dbscenarios_30mar.dbtest_allscenarios.service.Shift2rM2ovirtualParentForDepartmentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class Shift2rM2ovirtualParentForDepartment.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Shift2rM2ovirtualParentForDepartment
 */

@RestController(value = "Dbtest_allscenarios.Shift2rM2ovirtualParentForDepartmentController")
@Api(value = "/dbtest_allscenarios/Shift2rM2ovirtualParentForDepartment", description = "Exposes APIs to work with Shift2rM2ovirtualParentForDepartment resource.")
@RequestMapping("/dbtest_allscenarios/Shift2rM2ovirtualParentForDepartment")
public class Shift2rM2ovirtualParentForDepartmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(Shift2rM2ovirtualParentForDepartmentController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.Shift2rM2ovirtualParentForDepartmentService")
	private Shift2rM2ovirtualParentForDepartmentService shift2rM2ovirtualParentForDepartmentService;


    @Autowired
    @Qualifier("dbtest_allscenarios.CompositesKeyRelationsService")
    private CompositesKeyRelationsService compositesKeyRelationsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Shift2rM2ovirtualParentForDepartment instances matching the search criteria.")
	public Page<Shift2rM2ovirtualParentForDepartment> findShift2rM2ovirtualParentForDepartments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Shift2rM2ovirtualParentForDepartments list");
		return shift2rM2ovirtualParentForDepartmentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Shift2rM2ovirtualParentForDepartment instances.")
	public Page<Shift2rM2ovirtualParentForDepartment> getShift2rM2ovirtualParentForDepartments(Pageable pageable) {
		LOGGER.debug("Rendering Shift2rM2ovirtualParentForDepartments list");
		return shift2rM2ovirtualParentForDepartmentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Shift2rM2ovirtualParentForDepartment instances.")
	public Long countAllShift2rM2ovirtualParentForDepartments() {
		LOGGER.debug("counting Shift2rM2ovirtualParentForDepartments");
		Long count = shift2rM2ovirtualParentForDepartmentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Shift2rM2ovirtualParentForDepartment instance associated with the given id.")
    public Shift2rM2ovirtualParentForDepartment getShift2rM2ovirtualParentForDepartment(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting Shift2rM2ovirtualParentForDepartment with id: {}" , id);
        Shift2rM2ovirtualParentForDepartment instance = shift2rM2ovirtualParentForDepartmentService.findById(id);
        LOGGER.debug("Shift2rM2ovirtualParentForDepartment details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Shift2rM2ovirtualParentForDepartment instance associated with the given id.")
    public boolean deleteShift2rM2ovirtualParentForDepartment(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Shift2rM2ovirtualParentForDepartment with id: {}" , id);
        Shift2rM2ovirtualParentForDepartment deleted = shift2rM2ovirtualParentForDepartmentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Shift2rM2ovirtualParentForDepartment instance associated with the given id.")
    public Shift2rM2ovirtualParentForDepartment editShift2rM2ovirtualParentForDepartment(@PathVariable("id") Short id, @RequestBody Shift2rM2ovirtualParentForDepartment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Shift2rM2ovirtualParentForDepartment with id: {}" , instance.getShiftId());
        instance.setShiftId(id);
        instance = shift2rM2ovirtualParentForDepartmentService.update(instance);
        LOGGER.debug("Shift2rM2ovirtualParentForDepartment details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/compositesKeyRelationses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compositesKeyRelationses instance associated with the given id.")
     public Page<CompositesKeyRelations> findAssociatedcompositesKeyRelationses(Pageable pageable, @PathVariable("id") Short id){
        LOGGER.debug("Fetching all associated compositesKeyRelationses");
        return compositesKeyRelationsService.findAssociatedValues(id,"shift2rM2ovirtualParentForDepartment","shiftId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Shift2rM2ovirtualParentForDepartment instance.")
	public Shift2rM2ovirtualParentForDepartment createShift2rM2ovirtualParentForDepartment(@RequestBody Shift2rM2ovirtualParentForDepartment instance) {
		LOGGER.debug("Create Shift2rM2ovirtualParentForDepartment with information: {}" , instance);
		instance = shift2rM2ovirtualParentForDepartmentService.create(instance);
		LOGGER.debug("Created Shift2rM2ovirtualParentForDepartment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setShift2rM2ovirtualParentForDepartmentService(Shift2rM2ovirtualParentForDepartmentService service) {
		this.shift2rM2ovirtualParentForDepartmentService = service;
	}
}

