/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.dbscenarios_30mar.dbtest_allscenarios.service.PhoneNumberTypeO2oPersonPhoneService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.dbscenarios_30mar.dbtest_allscenarios.*;
import com.dbscenarios_30mar.dbtest_allscenarios.service.*;


/**
 * Controller object for domain model class PhoneNumberTypeO2oPersonPhone.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.PhoneNumberTypeO2oPersonPhone
 */

@RestController(value = "Dbtest_allscenarios.PhoneNumberTypeO2oPersonPhoneController")
@Api(value = "/dbtest_allscenarios/PhoneNumberTypeO2oPersonPhone", description = "Exposes APIs to work with PhoneNumberTypeO2oPersonPhone resource.")
@RequestMapping("/dbtest_allscenarios/PhoneNumberTypeO2oPersonPhone")
public class PhoneNumberTypeO2oPersonPhoneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PhoneNumberTypeO2oPersonPhoneController.class);

	@Autowired
	@Qualifier("dbtest_allscenarios.PhoneNumberTypeO2oPersonPhoneService")
	private PhoneNumberTypeO2oPersonPhoneService phoneNumberTypeO2oPersonPhoneService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of PhoneNumberTypeO2oPersonPhone instances matching the search criteria.")
	public Page<PhoneNumberTypeO2oPersonPhone> findPhoneNumberTypeO2oPersonPhones( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering PhoneNumberTypeO2oPersonPhones list");
		return phoneNumberTypeO2oPersonPhoneService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of PhoneNumberTypeO2oPersonPhone instances.")
	public Page<PhoneNumberTypeO2oPersonPhone> getPhoneNumberTypeO2oPersonPhones(Pageable pageable) {
		LOGGER.debug("Rendering PhoneNumberTypeO2oPersonPhones list");
		return phoneNumberTypeO2oPersonPhoneService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of PhoneNumberTypeO2oPersonPhone instances.")
	public Long countAllPhoneNumberTypeO2oPersonPhones() {
		LOGGER.debug("counting PhoneNumberTypeO2oPersonPhones");
		Long count = phoneNumberTypeO2oPersonPhoneService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the PhoneNumberTypeO2oPersonPhone instance associated with the given id.")
    public PhoneNumberTypeO2oPersonPhone getPhoneNumberTypeO2oPersonPhone(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PhoneNumberTypeO2oPersonPhone with id: {}" , id);
        PhoneNumberTypeO2oPersonPhone instance = phoneNumberTypeO2oPersonPhoneService.findById(id);
        LOGGER.debug("PhoneNumberTypeO2oPersonPhone details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the PhoneNumberTypeO2oPersonPhone instance associated with the given id.")
    public boolean deletePhoneNumberTypeO2oPersonPhone(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PhoneNumberTypeO2oPersonPhone with id: {}" , id);
        PhoneNumberTypeO2oPersonPhone deleted = phoneNumberTypeO2oPersonPhoneService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the PhoneNumberTypeO2oPersonPhone instance associated with the given id.")
    public PhoneNumberTypeO2oPersonPhone editPhoneNumberTypeO2oPersonPhone(@PathVariable("id") Integer id, @RequestBody PhoneNumberTypeO2oPersonPhone instance) throws EntityNotFoundException {
        LOGGER.debug("Editing PhoneNumberTypeO2oPersonPhone with id: {}" , instance.getPhoneNumberTypeId());
        instance.setPhoneNumberTypeId(id);
        instance = phoneNumberTypeO2oPersonPhoneService.update(instance);
        LOGGER.debug("PhoneNumberTypeO2oPersonPhone details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new PhoneNumberTypeO2oPersonPhone instance.")
	public PhoneNumberTypeO2oPersonPhone createPhoneNumberTypeO2oPersonPhone(@RequestBody PhoneNumberTypeO2oPersonPhone instance) {
		LOGGER.debug("Create PhoneNumberTypeO2oPersonPhone with information: {}" , instance);
		instance = phoneNumberTypeO2oPersonPhoneService.create(instance);
		LOGGER.debug("Created PhoneNumberTypeO2oPersonPhone with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setPhoneNumberTypeO2oPersonPhoneService(PhoneNumberTypeO2oPersonPhoneService service) {
		this.phoneNumberTypeO2oPersonPhoneService = service;
	}
}

