/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class Composites2.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Composites2
 */
@Service("dbtest_allscenarios.Composites2Service")
public class Composites2ServiceImpl implements Composites2Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Composites2ServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.Composites2Dao")
    private WMGenericDao<Composites2, Composites2Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Composites2, Composites2Id> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<Composites2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites2 create(Composites2 composites2) {
        LOGGER.debug("Creating a new composites2 with information: {}" , composites2);
        return this.wmGenericDao.create(composites2);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites2 delete(Composites2Id composites2Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting composites2 with id: {}" , composites2Id);
        Composites2 deleted = this.wmGenericDao.findById(composites2Id);
        if (deleted == null) {
            LOGGER.debug("No composites2 found with id: {}" , composites2Id);
            throw new EntityNotFoundException(String.valueOf(composites2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<Composites2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all composites2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<Composites2> findAll(Pageable pageable) {
        LOGGER.debug("Finding all composites2s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites2 findById(Composites2Id id) throws EntityNotFoundException {
        LOGGER.debug("Finding composites2 by id: {}" , id);
        Composites2 composites2=this.wmGenericDao.findById(id);
        if(composites2==null){
            LOGGER.debug("No composites2 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return composites2;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites2 update(Composites2 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating composites2 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Composites2Id id = new Composites2Id();
        id.setDateCol(updated.getDateCol());
        id.setId(updated.getId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


