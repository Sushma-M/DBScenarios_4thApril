/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class Composites1.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Composites1
 */

public interface Composites1Service {
   /**
	 * Creates a new composites1.
	 * 
	 * @param created
	 *            The information of the created composites1.
	 * @return The created composites1.
	 */
	public Composites1 create(Composites1 created);

	/**
	 * Deletes a composites1.
	 * 
	 * @param composites1Id
	 *            The id of the deleted composites1.
	 * @return The deleted composites1.
	 * @throws EntityNotFoundException
	 *             if no composites1 is found with the given id.
	 */
	public Composites1 delete(Composites1Id composites1Id) throws EntityNotFoundException;

	/**
	 * Finds all composites1s.
	 * 
	 * @return A list of composites1s.
	 */
	public Page<Composites1> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Composites1> findAll(Pageable pageable);
	
	/**
	 * Finds composites1 by id.
	 * 
	 * @param id
	 *            The id of the wanted composites1.
	 * @return The found composites1. If no composites1 is found, this method returns
	 *         null.
	 */
	public Composites1 findById(Composites1Id id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a composites1.
	 * 
	 * @param updated
	 *            The information of the updated composites1.
	 * @return The updated composites1.
	 * @throws EntityNotFoundException
	 *             if no composites1 is found with given id.
	 */
	public Composites1 update(Composites1 updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the composites1s in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the composites1.
	 */

	public long countAll();


    public Page<Composites1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

