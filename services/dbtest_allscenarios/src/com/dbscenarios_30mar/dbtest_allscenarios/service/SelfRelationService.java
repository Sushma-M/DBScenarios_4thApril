/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class SelfRelation.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.SelfRelation
 */

public interface SelfRelationService {
   /**
	 * Creates a new selfrelation.
	 * 
	 * @param created
	 *            The information of the created selfrelation.
	 * @return The created selfrelation.
	 */
	public SelfRelation create(SelfRelation created);

	/**
	 * Deletes a selfrelation.
	 * 
	 * @param selfrelationId
	 *            The id of the deleted selfrelation.
	 * @return The deleted selfrelation.
	 * @throws EntityNotFoundException
	 *             if no selfrelation is found with the given id.
	 */
	public SelfRelation delete(Integer selfrelationId) throws EntityNotFoundException;

	/**
	 * Finds all selfrelations.
	 * 
	 * @return A list of selfrelations.
	 */
	public Page<SelfRelation> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SelfRelation> findAll(Pageable pageable);
	
	/**
	 * Finds selfrelation by id.
	 * 
	 * @param id
	 *            The id of the wanted selfrelation.
	 * @return The found selfrelation. If no selfrelation is found, this method returns
	 *         null.
	 */
	public SelfRelation findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a selfrelation.
	 * 
	 * @param updated
	 *            The information of the updated selfrelation.
	 * @return The updated selfrelation.
	 * @throws EntityNotFoundException
	 *             if no selfrelation is found with given id.
	 */
	public SelfRelation update(SelfRelation updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the selfrelations in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the selfrelation.
	 */

	public long countAll();


    public Page<SelfRelation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

