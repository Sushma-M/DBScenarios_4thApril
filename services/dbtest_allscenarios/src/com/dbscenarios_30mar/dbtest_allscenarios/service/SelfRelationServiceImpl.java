/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class SelfRelation.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.SelfRelation
 */
@Service("dbtest_allscenarios.SelfRelationService")
public class SelfRelationServiceImpl implements SelfRelationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SelfRelationServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.SelfRelationDao")
    private WMGenericDao<SelfRelation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SelfRelation, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<SelfRelation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public SelfRelation create(SelfRelation selfrelation) {
        LOGGER.debug("Creating a new selfrelation with information: {}" , selfrelation);
        return this.wmGenericDao.create(selfrelation);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public SelfRelation delete(Integer selfrelationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting selfrelation with id: {}" , selfrelationId);
        SelfRelation deleted = this.wmGenericDao.findById(selfrelationId);
        if (deleted == null) {
            LOGGER.debug("No selfrelation found with id: {}" , selfrelationId);
            throw new EntityNotFoundException(String.valueOf(selfrelationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<SelfRelation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all selfrelations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<SelfRelation> findAll(Pageable pageable) {
        LOGGER.debug("Finding all selfrelations");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public SelfRelation findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding selfrelation by id: {}" , id);
        SelfRelation selfrelation=this.wmGenericDao.findById(id);
        if(selfrelation==null){
            LOGGER.debug("No selfrelation found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return selfrelation;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public SelfRelation update(SelfRelation updated) throws EntityNotFoundException {
        LOGGER.debug("Updating selfrelation with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


