/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class PersonPhoneO2oM2o.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.PersonPhoneO2oM2o
 */

public interface PersonPhoneO2oM2oService {
   /**
	 * Creates a new personphoneo2om2o.
	 * 
	 * @param created
	 *            The information of the created personphoneo2om2o.
	 * @return The created personphoneo2om2o.
	 */
	public PersonPhoneO2oM2o create(PersonPhoneO2oM2o created);

	/**
	 * Deletes a personphoneo2om2o.
	 * 
	 * @param personphoneo2om2oId
	 *            The id of the deleted personphoneo2om2o.
	 * @return The deleted personphoneo2om2o.
	 * @throws EntityNotFoundException
	 *             if no personphoneo2om2o is found with the given id.
	 */
	public PersonPhoneO2oM2o delete(Integer personphoneo2om2oId) throws EntityNotFoundException;

	/**
	 * Finds all personphoneo2om2os.
	 * 
	 * @return A list of personphoneo2om2os.
	 */
	public Page<PersonPhoneO2oM2o> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PersonPhoneO2oM2o> findAll(Pageable pageable);
	
	/**
	 * Finds personphoneo2om2o by id.
	 * 
	 * @param id
	 *            The id of the wanted personphoneo2om2o.
	 * @return The found personphoneo2om2o. If no personphoneo2om2o is found, this method returns
	 *         null.
	 */
	public PersonPhoneO2oM2o findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a personphoneo2om2o.
	 * 
	 * @param updated
	 *            The information of the updated personphoneo2om2o.
	 * @return The updated personphoneo2om2o.
	 * @throws EntityNotFoundException
	 *             if no personphoneo2om2o is found with given id.
	 */
	public PersonPhoneO2oM2o update(PersonPhoneO2oM2o updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the personphoneo2om2os in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the personphoneo2om2o.
	 */

	public long countAll();


    public Page<PersonPhoneO2oM2o> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

