/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class Composites1.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Composites1
 */
@Service("dbtest_allscenarios.Composites1Service")
public class Composites1ServiceImpl implements Composites1Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Composites1ServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.Composites1Dao")
    private WMGenericDao<Composites1, Composites1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Composites1, Composites1Id> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<Composites1> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites1 create(Composites1 composites1) {
        LOGGER.debug("Creating a new composites1 with information: {}" , composites1);
        return this.wmGenericDao.create(composites1);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites1 delete(Composites1Id composites1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting composites1 with id: {}" , composites1Id);
        Composites1 deleted = this.wmGenericDao.findById(composites1Id);
        if (deleted == null) {
            LOGGER.debug("No composites1 found with id: {}" , composites1Id);
            throw new EntityNotFoundException(String.valueOf(composites1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<Composites1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all composites1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<Composites1> findAll(Pageable pageable) {
        LOGGER.debug("Finding all composites1s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites1 findById(Composites1Id id) throws EntityNotFoundException {
        LOGGER.debug("Finding composites1 by id: {}" , id);
        Composites1 composites1=this.wmGenericDao.findById(id);
        if(composites1==null){
            LOGGER.debug("No composites1 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return composites1;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Composites1 update(Composites1 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating composites1 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Composites1Id id = new Composites1Id();
        id.setId(updated.getId());
        id.setDateCol(updated.getDateCol());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


