/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class CompositesKeyRelations.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.CompositesKeyRelations
 */
@Service("dbtest_allscenarios.CompositesKeyRelationsService")
public class CompositesKeyRelationsServiceImpl implements CompositesKeyRelationsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CompositesKeyRelationsServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.CompositesKeyRelationsDao")
    private WMGenericDao<CompositesKeyRelations, CompositesKeyRelationsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositesKeyRelations, CompositesKeyRelationsId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<CompositesKeyRelations> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public CompositesKeyRelations create(CompositesKeyRelations compositeskeyrelations) {
        LOGGER.debug("Creating a new compositeskeyrelations with information: {}" , compositeskeyrelations);
        return this.wmGenericDao.create(compositeskeyrelations);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CompositesKeyRelations delete(CompositesKeyRelationsId compositeskeyrelationsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting compositeskeyrelations with id: {}" , compositeskeyrelationsId);
        CompositesKeyRelations deleted = this.wmGenericDao.findById(compositeskeyrelationsId);
        if (deleted == null) {
            LOGGER.debug("No compositeskeyrelations found with id: {}" , compositeskeyrelationsId);
            throw new EntityNotFoundException(String.valueOf(compositeskeyrelationsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<CompositesKeyRelations> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all compositeskeyrelationss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<CompositesKeyRelations> findAll(Pageable pageable) {
        LOGGER.debug("Finding all compositeskeyrelationss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CompositesKeyRelations findById(CompositesKeyRelationsId id) throws EntityNotFoundException {
        LOGGER.debug("Finding compositeskeyrelations by id: {}" , id);
        CompositesKeyRelations compositeskeyrelations=this.wmGenericDao.findById(id);
        if(compositeskeyrelations==null){
            LOGGER.debug("No compositeskeyrelations found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return compositeskeyrelations;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CompositesKeyRelations update(CompositesKeyRelations updated) throws EntityNotFoundException {
        LOGGER.debug("Updating compositeskeyrelations with information: {}" , updated);
        this.wmGenericDao.update(updated);

        CompositesKeyRelationsId id = new CompositesKeyRelationsId();
        id.setBusinessEntityId(updated.getBusinessEntityId());
        id.setShiftId(updated.getShiftId());
        id.setDepartmentId(updated.getDepartmentId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


