/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class HireDateTableM2oFromEmployee.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.HireDateTableM2oFromEmployee
 */
@Service("dbtest_allscenarios.HireDateTableM2oFromEmployeeService")
public class HireDateTableM2oFromEmployeeServiceImpl implements HireDateTableM2oFromEmployeeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(HireDateTableM2oFromEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.HireDateTableM2oFromEmployeeDao")
    private WMGenericDao<HireDateTableM2oFromEmployee, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<HireDateTableM2oFromEmployee, Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<HireDateTableM2oFromEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public HireDateTableM2oFromEmployee create(HireDateTableM2oFromEmployee hiredatetablem2ofromemployee) {
        LOGGER.debug("Creating a new hiredatetablem2ofromemployee with information: {}" , hiredatetablem2ofromemployee);
        return this.wmGenericDao.create(hiredatetablem2ofromemployee);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public HireDateTableM2oFromEmployee delete(Date hiredatetablem2ofromemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting hiredatetablem2ofromemployee with id: {}" , hiredatetablem2ofromemployeeId);
        HireDateTableM2oFromEmployee deleted = this.wmGenericDao.findById(hiredatetablem2ofromemployeeId);
        if (deleted == null) {
            LOGGER.debug("No hiredatetablem2ofromemployee found with id: {}" , hiredatetablem2ofromemployeeId);
            throw new EntityNotFoundException(String.valueOf(hiredatetablem2ofromemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<HireDateTableM2oFromEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all hiredatetablem2ofromemployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<HireDateTableM2oFromEmployee> findAll(Pageable pageable) {
        LOGGER.debug("Finding all hiredatetablem2ofromemployees");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public HireDateTableM2oFromEmployee findById(Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding hiredatetablem2ofromemployee by id: {}" , id);
        HireDateTableM2oFromEmployee hiredatetablem2ofromemployee=this.wmGenericDao.findById(id);
        if(hiredatetablem2ofromemployee==null){
            LOGGER.debug("No hiredatetablem2ofromemployee found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return hiredatetablem2ofromemployee;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public HireDateTableM2oFromEmployee update(HireDateTableM2oFromEmployee updated) throws EntityNotFoundException {
        LOGGER.debug("Updating hiredatetablem2ofromemployee with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Date id = (Date)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


