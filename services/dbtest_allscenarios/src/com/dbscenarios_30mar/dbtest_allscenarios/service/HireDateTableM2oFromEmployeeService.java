/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class HireDateTableM2oFromEmployee.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.HireDateTableM2oFromEmployee
 */

public interface HireDateTableM2oFromEmployeeService {
   /**
	 * Creates a new hiredatetablem2ofromemployee.
	 * 
	 * @param created
	 *            The information of the created hiredatetablem2ofromemployee.
	 * @return The created hiredatetablem2ofromemployee.
	 */
	public HireDateTableM2oFromEmployee create(HireDateTableM2oFromEmployee created);

	/**
	 * Deletes a hiredatetablem2ofromemployee.
	 * 
	 * @param hiredatetablem2ofromemployeeId
	 *            The id of the deleted hiredatetablem2ofromemployee.
	 * @return The deleted hiredatetablem2ofromemployee.
	 * @throws EntityNotFoundException
	 *             if no hiredatetablem2ofromemployee is found with the given id.
	 */
	public HireDateTableM2oFromEmployee delete(Date hiredatetablem2ofromemployeeId) throws EntityNotFoundException;

	/**
	 * Finds all hiredatetablem2ofromemployees.
	 * 
	 * @return A list of hiredatetablem2ofromemployees.
	 */
	public Page<HireDateTableM2oFromEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<HireDateTableM2oFromEmployee> findAll(Pageable pageable);
	
	/**
	 * Finds hiredatetablem2ofromemployee by id.
	 * 
	 * @param id
	 *            The id of the wanted hiredatetablem2ofromemployee.
	 * @return The found hiredatetablem2ofromemployee. If no hiredatetablem2ofromemployee is found, this method returns
	 *         null.
	 */
	public HireDateTableM2oFromEmployee findById(Date id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a hiredatetablem2ofromemployee.
	 * 
	 * @param updated
	 *            The information of the updated hiredatetablem2ofromemployee.
	 * @return The updated hiredatetablem2ofromemployee.
	 * @throws EntityNotFoundException
	 *             if no hiredatetablem2ofromemployee is found with given id.
	 */
	public HireDateTableM2oFromEmployee update(HireDateTableM2oFromEmployee updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the hiredatetablem2ofromemployees in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the hiredatetablem2ofromemployee.
	 */

	public long countAll();


    public Page<HireDateTableM2oFromEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

