/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class AddressM1Sp.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.AddressM1Sp
 */

public interface AddressM1SpService {
   /**
	 * Creates a new addressm1sp.
	 * 
	 * @param created
	 *            The information of the created addressm1sp.
	 * @return The created addressm1sp.
	 */
	public AddressM1Sp create(AddressM1Sp created);

	/**
	 * Deletes a addressm1sp.
	 * 
	 * @param addressm1spId
	 *            The id of the deleted addressm1sp.
	 * @return The deleted addressm1sp.
	 * @throws EntityNotFoundException
	 *             if no addressm1sp is found with the given id.
	 */
	public AddressM1Sp delete(Integer addressm1spId) throws EntityNotFoundException;

	/**
	 * Finds all addressm1sps.
	 * 
	 * @return A list of addressm1sps.
	 */
	public Page<AddressM1Sp> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AddressM1Sp> findAll(Pageable pageable);
	
	/**
	 * Finds addressm1sp by id.
	 * 
	 * @param id
	 *            The id of the wanted addressm1sp.
	 * @return The found addressm1sp. If no addressm1sp is found, this method returns
	 *         null.
	 */
	public AddressM1Sp findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a addressm1sp.
	 * 
	 * @param updated
	 *            The information of the updated addressm1sp.
	 * @return The updated addressm1sp.
	 * @throws EntityNotFoundException
	 *             if no addressm1sp is found with given id.
	 */
	public AddressM1Sp update(AddressM1Sp updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the addressm1sps in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the addressm1sp.
	 */

	public long countAll();


    public Page<AddressM1Sp> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

