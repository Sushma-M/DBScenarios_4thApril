/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class CountryRegionM2oFromSp.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.CountryRegionM2oFromSp
 */
@Service("dbtest_allscenarios.CountryRegionM2oFromSpService")
public class CountryRegionM2oFromSpServiceImpl implements CountryRegionM2oFromSpService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CountryRegionM2oFromSpServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.CountryRegionM2oFromSpDao")
    private WMGenericDao<CountryRegionM2oFromSp, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CountryRegionM2oFromSp, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<CountryRegionM2oFromSp> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public CountryRegionM2oFromSp create(CountryRegionM2oFromSp countryregionm2ofromsp) {
        LOGGER.debug("Creating a new countryregionm2ofromsp with information: {}" , countryregionm2ofromsp);
        return this.wmGenericDao.create(countryregionm2ofromsp);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CountryRegionM2oFromSp delete(String countryregionm2ofromspId) throws EntityNotFoundException {
        LOGGER.debug("Deleting countryregionm2ofromsp with id: {}" , countryregionm2ofromspId);
        CountryRegionM2oFromSp deleted = this.wmGenericDao.findById(countryregionm2ofromspId);
        if (deleted == null) {
            LOGGER.debug("No countryregionm2ofromsp found with id: {}" , countryregionm2ofromspId);
            throw new EntityNotFoundException(String.valueOf(countryregionm2ofromspId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<CountryRegionM2oFromSp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all countryregionm2ofromsps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<CountryRegionM2oFromSp> findAll(Pageable pageable) {
        LOGGER.debug("Finding all countryregionm2ofromsps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CountryRegionM2oFromSp findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding countryregionm2ofromsp by id: {}" , id);
        CountryRegionM2oFromSp countryregionm2ofromsp=this.wmGenericDao.findById(id);
        if(countryregionm2ofromsp==null){
            LOGGER.debug("No countryregionm2ofromsp found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return countryregionm2ofromsp;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public CountryRegionM2oFromSp update(CountryRegionM2oFromSp updated) throws EntityNotFoundException {
        LOGGER.debug("Updating countryregionm2ofromsp with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getCountryRegionCode();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


