/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class Composites2.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.Composites2
 */

public interface Composites2Service {
   /**
	 * Creates a new composites2.
	 * 
	 * @param created
	 *            The information of the created composites2.
	 * @return The created composites2.
	 */
	public Composites2 create(Composites2 created);

	/**
	 * Deletes a composites2.
	 * 
	 * @param composites2Id
	 *            The id of the deleted composites2.
	 * @return The deleted composites2.
	 * @throws EntityNotFoundException
	 *             if no composites2 is found with the given id.
	 */
	public Composites2 delete(Composites2Id composites2Id) throws EntityNotFoundException;

	/**
	 * Finds all composites2s.
	 * 
	 * @return A list of composites2s.
	 */
	public Page<Composites2> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Composites2> findAll(Pageable pageable);
	
	/**
	 * Finds composites2 by id.
	 * 
	 * @param id
	 *            The id of the wanted composites2.
	 * @return The found composites2. If no composites2 is found, this method returns
	 *         null.
	 */
	public Composites2 findById(Composites2Id id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a composites2.
	 * 
	 * @param updated
	 *            The information of the updated composites2.
	 * @return The updated composites2.
	 * @throws EntityNotFoundException
	 *             if no composites2 is found with given id.
	 */
	public Composites2 update(Composites2 updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the composites2s in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the composites2.
	 */

	public long countAll();


    public Page<Composites2> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

