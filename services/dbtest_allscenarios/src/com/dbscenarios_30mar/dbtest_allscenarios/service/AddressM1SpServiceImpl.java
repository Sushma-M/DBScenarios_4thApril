/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class AddressM1Sp.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.AddressM1Sp
 */
@Service("dbtest_allscenarios.AddressM1SpService")
public class AddressM1SpServiceImpl implements AddressM1SpService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AddressM1SpServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.AddressM1SpDao")
    private WMGenericDao<AddressM1Sp, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AddressM1Sp, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<AddressM1Sp> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public AddressM1Sp create(AddressM1Sp addressm1sp) {
        LOGGER.debug("Creating a new addressm1sp with information: {}" , addressm1sp);
        return this.wmGenericDao.create(addressm1sp);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AddressM1Sp delete(Integer addressm1spId) throws EntityNotFoundException {
        LOGGER.debug("Deleting addressm1sp with id: {}" , addressm1spId);
        AddressM1Sp deleted = this.wmGenericDao.findById(addressm1spId);
        if (deleted == null) {
            LOGGER.debug("No addressm1sp found with id: {}" , addressm1spId);
            throw new EntityNotFoundException(String.valueOf(addressm1spId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<AddressM1Sp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all addressm1sps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<AddressM1Sp> findAll(Pageable pageable) {
        LOGGER.debug("Finding all addressm1sps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AddressM1Sp findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding addressm1sp by id: {}" , id);
        AddressM1Sp addressm1sp=this.wmGenericDao.findById(id);
        if(addressm1sp==null){
            LOGGER.debug("No addressm1sp found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return addressm1sp;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AddressM1Sp update(AddressM1Sp updated) throws EntityNotFoundException {
        LOGGER.debug("Updating addressm1sp with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getAddressId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


