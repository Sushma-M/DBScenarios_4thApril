/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class EmployeeRelationFrom2tables.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.EmployeeRelationFrom2tables
 */

public interface EmployeeRelationFrom2tablesService {
   /**
	 * Creates a new employeerelationfrom2tables.
	 * 
	 * @param created
	 *            The information of the created employeerelationfrom2tables.
	 * @return The created employeerelationfrom2tables.
	 */
	public EmployeeRelationFrom2tables create(EmployeeRelationFrom2tables created);

	/**
	 * Deletes a employeerelationfrom2tables.
	 * 
	 * @param employeerelationfrom2tablesId
	 *            The id of the deleted employeerelationfrom2tables.
	 * @return The deleted employeerelationfrom2tables.
	 * @throws EntityNotFoundException
	 *             if no employeerelationfrom2tables is found with the given id.
	 */
	public EmployeeRelationFrom2tables delete(Integer employeerelationfrom2tablesId) throws EntityNotFoundException;

	/**
	 * Finds all employeerelationfrom2tabless.
	 * 
	 * @return A list of employeerelationfrom2tabless.
	 */
	public Page<EmployeeRelationFrom2tables> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeRelationFrom2tables> findAll(Pageable pageable);
	
	/**
	 * Finds employeerelationfrom2tables by id.
	 * 
	 * @param id
	 *            The id of the wanted employeerelationfrom2tables.
	 * @return The found employeerelationfrom2tables. If no employeerelationfrom2tables is found, this method returns
	 *         null.
	 */
	public EmployeeRelationFrom2tables findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeerelationfrom2tables.
	 * 
	 * @param updated
	 *            The information of the updated employeerelationfrom2tables.
	 * @return The updated employeerelationfrom2tables.
	 * @throws EntityNotFoundException
	 *             if no employeerelationfrom2tables is found with given id.
	 */
	public EmployeeRelationFrom2tables update(EmployeeRelationFrom2tables updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeerelationfrom2tabless in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeerelationfrom2tables.
	 */

	public long countAll();


    public Page<EmployeeRelationFrom2tables> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

