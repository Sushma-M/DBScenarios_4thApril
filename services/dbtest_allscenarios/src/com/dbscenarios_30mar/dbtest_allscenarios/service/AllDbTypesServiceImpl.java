/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class AllDbTypes.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.AllDbTypes
 */
@Service("dbtest_allscenarios.AllDbTypesService")
public class AllDbTypesServiceImpl implements AllDbTypesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AllDbTypesServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.AllDbTypesDao")
    private WMGenericDao<AllDbTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllDbTypes, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<AllDbTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public AllDbTypes create(AllDbTypes alldbtypes) {
        LOGGER.debug("Creating a new alldbtypes with information: {}" , alldbtypes);
        return this.wmGenericDao.create(alldbtypes);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AllDbTypes delete(Integer alldbtypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting alldbtypes with id: {}" , alldbtypesId);
        AllDbTypes deleted = this.wmGenericDao.findById(alldbtypesId);
        if (deleted == null) {
            LOGGER.debug("No alldbtypes found with id: {}" , alldbtypesId);
            throw new EntityNotFoundException(String.valueOf(alldbtypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<AllDbTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all alldbtypess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<AllDbTypes> findAll(Pageable pageable) {
        LOGGER.debug("Finding all alldbtypess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AllDbTypes findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding alldbtypes by id: {}" , id);
        AllDbTypes alldbtypes=this.wmGenericDao.findById(id);
        if(alldbtypes==null){
            LOGGER.debug("No alldbtypes found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return alldbtypes;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public AllDbTypes update(AllDbTypes updated) throws EntityNotFoundException {
        LOGGER.debug("Updating alldbtypes with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


