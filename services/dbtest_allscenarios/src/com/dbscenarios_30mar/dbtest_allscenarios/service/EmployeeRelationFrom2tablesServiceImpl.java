/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;


/**
 * ServiceImpl object for domain model class EmployeeRelationFrom2tables.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.EmployeeRelationFrom2tables
 */
@Service("dbtest_allscenarios.EmployeeRelationFrom2tablesService")
public class EmployeeRelationFrom2tablesServiceImpl implements EmployeeRelationFrom2tablesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeRelationFrom2tablesServiceImpl.class);

    @Autowired
    @Qualifier("dbtest_allscenarios.EmployeeRelationFrom2tablesDao")
    private WMGenericDao<EmployeeRelationFrom2tables, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeRelationFrom2tables, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
     public Page<EmployeeRelationFrom2tables> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "dbtest_allscenariosTransactionManager")
    @Override
    public EmployeeRelationFrom2tables create(EmployeeRelationFrom2tables employeerelationfrom2tables) {
        LOGGER.debug("Creating a new employeerelationfrom2tables with information: {}" , employeerelationfrom2tables);
        return this.wmGenericDao.create(employeerelationfrom2tables);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public EmployeeRelationFrom2tables delete(Integer employeerelationfrom2tablesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeerelationfrom2tables with id: {}" , employeerelationfrom2tablesId);
        EmployeeRelationFrom2tables deleted = this.wmGenericDao.findById(employeerelationfrom2tablesId);
        if (deleted == null) {
            LOGGER.debug("No employeerelationfrom2tables found with id: {}" , employeerelationfrom2tablesId);
            throw new EntityNotFoundException(String.valueOf(employeerelationfrom2tablesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<EmployeeRelationFrom2tables> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeerelationfrom2tabless");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public Page<EmployeeRelationFrom2tables> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeerelationfrom2tabless");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public EmployeeRelationFrom2tables findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeerelationfrom2tables by id: {}" , id);
        EmployeeRelationFrom2tables employeerelationfrom2tables=this.wmGenericDao.findById(id);
        if(employeerelationfrom2tables==null){
            LOGGER.debug("No employeerelationfrom2tables found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeerelationfrom2tables;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbtest_allscenariosTransactionManager")
    @Override
    public EmployeeRelationFrom2tables update(EmployeeRelationFrom2tables updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeerelationfrom2tables with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getBusinessEntityId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "dbtest_allscenariosTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


