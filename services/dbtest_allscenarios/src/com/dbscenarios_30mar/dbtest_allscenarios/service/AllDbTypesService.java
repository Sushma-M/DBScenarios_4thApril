/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.dbtest_allscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.dbtest_allscenarios.*;

/**
 * Service object for domain model class AllDbTypes.
 * @see com.dbscenarios_30mar.dbtest_allscenarios.AllDbTypes
 */

public interface AllDbTypesService {
   /**
	 * Creates a new alldbtypes.
	 * 
	 * @param created
	 *            The information of the created alldbtypes.
	 * @return The created alldbtypes.
	 */
	public AllDbTypes create(AllDbTypes created);

	/**
	 * Deletes a alldbtypes.
	 * 
	 * @param alldbtypesId
	 *            The id of the deleted alldbtypes.
	 * @return The deleted alldbtypes.
	 * @throws EntityNotFoundException
	 *             if no alldbtypes is found with the given id.
	 */
	public AllDbTypes delete(Integer alldbtypesId) throws EntityNotFoundException;

	/**
	 * Finds all alldbtypess.
	 * 
	 * @return A list of alldbtypess.
	 */
	public Page<AllDbTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AllDbTypes> findAll(Pageable pageable);
	
	/**
	 * Finds alldbtypes by id.
	 * 
	 * @param id
	 *            The id of the wanted alldbtypes.
	 * @return The found alldbtypes. If no alldbtypes is found, this method returns
	 *         null.
	 */
	public AllDbTypes findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a alldbtypes.
	 * 
	 * @param updated
	 *            The information of the updated alldbtypes.
	 * @return The updated alldbtypes.
	 * @throws EntityNotFoundException
	 *             if no alldbtypes is found with given id.
	 */
	public AllDbTypes update(AllDbTypes updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the alldbtypess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the alldbtypes.
	 */

	public long countAll();


    public Page<AllDbTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

