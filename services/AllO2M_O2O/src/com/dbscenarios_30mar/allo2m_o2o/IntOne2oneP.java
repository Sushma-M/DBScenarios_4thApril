/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * IntOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`Int_One2One_P`"
)

public class IntOne2oneP  implements java.io.Serializable {

    
    private Integer intId;
    
    private String string1;
    
    private IntOne2oneC intOne2oneC;

    public IntOne2oneP() {
    }


    @Id 
    

    @Column(name="`IntID`", precision=10)
    public Integer getIntId() {
        return this.intId;
    }
    
    public void setIntId(Integer intId) {
        this.intId = intId;
    }

    

    @Column(name="`String1`")
    public String getString1() {
        return this.string1;
    }
    
    public void setString1(String string1) {
        this.string1 = string1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="intOne2oneP")
    public IntOne2oneC getIntOne2oneC() {
        return this.intOne2oneC;
    }
    
    public void setIntOne2oneC(IntOne2oneC intOne2oneC) {
        this.intOne2oneC = intOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof IntOne2oneP) )
		    return false;

		 IntOne2oneP that = (IntOne2oneP) o;

		 return ( (this.getIntId()==that.getIntId()) || ( this.getIntId()!=null && that.getIntId()!=null && this.getIntId().equals(that.getIntId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIntId() == null ? 0 : this.getIntId().hashCode() );

         return result;
    }


}

