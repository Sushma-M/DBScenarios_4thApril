/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * TimeOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`Time_One2One_P`"
)

public class TimeOne2oneP  implements java.io.Serializable {

    
    private Date timeId;
    
    private Date time1;
    
    private TimeOne2oneC timeOne2oneC;

    public TimeOne2oneP() {
    }


    @Id 
    @Temporal(TemporalType.TIME)

    @Column(name="`TimeID`", length=8)
    public Date getTimeId() {
        return this.timeId;
    }
    
    public void setTimeId(Date timeId) {
        this.timeId = timeId;
    }

    @Temporal(TemporalType.TIME)

    @Column(name="`Time1`", length=8)
    public Date getTime1() {
        return this.time1;
    }
    
    public void setTime1(Date time1) {
        this.time1 = time1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="timeOne2oneP")
    public TimeOne2oneC getTimeOne2oneC() {
        return this.timeOne2oneC;
    }
    
    public void setTimeOne2oneC(TimeOne2oneC timeOne2oneC) {
        this.timeOne2oneC = timeOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof TimeOne2oneP) )
		    return false;

		 TimeOne2oneP that = (TimeOne2oneP) o;

		 return ( (this.getTimeId()==that.getTimeId()) || ( this.getTimeId()!=null && that.getTimeId()!=null && this.getTimeId().equals(that.getTimeId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getTimeId() == null ? 0 : this.getTimeId().hashCode() );

         return result;
    }


}

