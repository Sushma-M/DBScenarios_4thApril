/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.math.BigInteger;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * BigIntOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`BigInt_One2One_P`"
)

public class BigIntOne2oneP  implements java.io.Serializable {

    
    private BigInteger bigIntId;
    
    private BigInteger bigInt1;
    
    private BigIntOne2oneC bigIntOne2oneC;

    public BigIntOne2oneP() {
    }


    @Id 
    

    @Column(name="`BigIntID`", precision=20)
    public BigInteger getBigIntId() {
        return this.bigIntId;
    }
    
    public void setBigIntId(BigInteger bigIntId) {
        this.bigIntId = bigIntId;
    }

    

    @Column(name="`BigInt1`", precision=20)
    public BigInteger getBigInt1() {
        return this.bigInt1;
    }
    
    public void setBigInt1(BigInteger bigInt1) {
        this.bigInt1 = bigInt1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="bigIntOne2oneP")
    public BigIntOne2oneC getBigIntOne2oneC() {
        return this.bigIntOne2oneC;
    }
    
    public void setBigIntOne2oneC(BigIntOne2oneC bigIntOne2oneC) {
        this.bigIntOne2oneC = bigIntOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof BigIntOne2oneP) )
		    return false;

		 BigIntOne2oneP that = (BigIntOne2oneP) o;

		 return ( (this.getBigIntId()==that.getBigIntId()) || ( this.getBigIntId()!=null && that.getBigIntId()!=null && this.getBigIntId().equals(that.getBigIntId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getBigIntId() == null ? 0 : this.getBigIntId().hashCode() );

         return result;
    }


}

