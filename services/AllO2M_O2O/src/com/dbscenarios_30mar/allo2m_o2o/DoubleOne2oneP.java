/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * DoubleOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`Double_One2One_P`"
)

public class DoubleOne2oneP  implements java.io.Serializable {

    
    private Double doubleId;
    
    private Double double1;
    
    private DoubleOne2oneC doubleOne2oneC;

    public DoubleOne2oneP() {
    }


    @Id 
    

    @Column(name="`DoubleID`", precision=18, scale=8)
    public Double getDoubleId() {
        return this.doubleId;
    }
    
    public void setDoubleId(Double doubleId) {
        this.doubleId = doubleId;
    }

    

    @Column(name="`Double1`", precision=18, scale=8)
    public Double getDouble1() {
        return this.double1;
    }
    
    public void setDouble1(Double double1) {
        this.double1 = double1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="doubleOne2oneP")
    public DoubleOne2oneC getDoubleOne2oneC() {
        return this.doubleOne2oneC;
    }
    
    public void setDoubleOne2oneC(DoubleOne2oneC doubleOne2oneC) {
        this.doubleOne2oneC = doubleOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof DoubleOne2oneP) )
		    return false;

		 DoubleOne2oneP that = (DoubleOne2oneP) o;

		 return ( (this.getDoubleId()==that.getDoubleId()) || ( this.getDoubleId()!=null && that.getDoubleId()!=null && this.getDoubleId().equals(that.getDoubleId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getDoubleId() == null ? 0 : this.getDoubleId().hashCode() );

         return result;
    }


}

