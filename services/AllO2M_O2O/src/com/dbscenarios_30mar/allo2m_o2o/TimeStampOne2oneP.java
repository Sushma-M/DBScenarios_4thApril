/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * TimeStampOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`TimeStamp_One2One_P`"
)

public class TimeStampOne2oneP  implements java.io.Serializable {

    
    private Date timeStamp;
    
    private Date timestamp1;
    
    private TimeStampOne2oneC timeStampOne2oneC;

    public TimeStampOne2oneP() {
    }


    @Id 
    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`TimeStamp`", length=19)
    public Date getTimeStamp() {
        return this.timeStamp;
    }
    
    public void setTimeStamp(Date timeStamp) {
        this.timeStamp = timeStamp;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`Timestamp1`", length=19)
    public Date getTimestamp1() {
        return this.timestamp1;
    }
    
    public void setTimestamp1(Date timestamp1) {
        this.timestamp1 = timestamp1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="timeStampOne2oneP")
    public TimeStampOne2oneC getTimeStampOne2oneC() {
        return this.timeStampOne2oneC;
    }
    
    public void setTimeStampOne2oneC(TimeStampOne2oneC timeStampOne2oneC) {
        this.timeStampOne2oneC = timeStampOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof TimeStampOne2oneP) )
		    return false;

		 TimeStampOne2oneP that = (TimeStampOne2oneP) o;

		 return ( (this.getTimeStamp()==that.getTimeStamp()) || ( this.getTimeStamp()!=null && that.getTimeStamp()!=null && this.getTimeStamp().equals(that.getTimeStamp()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getTimeStamp() == null ? 0 : this.getTimeStamp().hashCode() );

         return result;
    }


}

