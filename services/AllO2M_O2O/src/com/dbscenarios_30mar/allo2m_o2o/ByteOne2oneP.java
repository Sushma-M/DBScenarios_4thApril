/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ByteOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`Byte_One2One_P`"
)

public class ByteOne2oneP  implements java.io.Serializable {

    
    private Byte byteId;
    
    private Byte byte1;
    
    private ByteOne2oneC byteOne2oneC;

    public ByteOne2oneP() {
    }


    @Id 
    

    @Column(name="`ByteID`", precision=2)
    public Byte getByteId() {
        return this.byteId;
    }
    
    public void setByteId(Byte byteId) {
        this.byteId = byteId;
    }

    

    @Column(name="`Byte1`", precision=2)
    public Byte getByte1() {
        return this.byte1;
    }
    
    public void setByte1(Byte byte1) {
        this.byte1 = byte1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="byteOne2oneP")
    public ByteOne2oneC getByteOne2oneC() {
        return this.byteOne2oneC;
    }
    
    public void setByteOne2oneC(ByteOne2oneC byteOne2oneC) {
        this.byteOne2oneC = byteOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ByteOne2oneP) )
		    return false;

		 ByteOne2oneP that = (ByteOne2oneP) o;

		 return ( (this.getByteId()==that.getByteId()) || ( this.getByteId()!=null && that.getByteId()!=null && this.getByteId().equals(that.getByteId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getByteId() == null ? 0 : this.getByteId().hashCode() );

         return result;
    }


}

