/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * StringOne2oneC generated by hbm2java
 */
@Entity
@Table(name="`String_One2One_C`"
)

public class StringOne2oneC  implements java.io.Serializable {

    
    private String stringId;
    
    private String string1;
    
    private StringOne2oneP stringOne2oneP;

    public StringOne2oneC() {
    }


    @GenericGenerator(name="generator", strategy="foreign", parameters=@Parameter(name="property", value="stringOne2oneP"))@Id @GeneratedValue(generator="generator")
    

    @Column(name="`StringID`")
    public String getStringId() {
        return this.stringId;
    }
    
    public void setStringId(String stringId) {
        this.stringId = stringId;
    }

    

    @Column(name="`String1`")
    public String getString1() {
        return this.string1;
    }
    
    public void setString1(String string1) {
        this.string1 = string1;
    }

    @OneToOne(fetch=FetchType.EAGER) @PrimaryKeyJoinColumn
    public StringOne2oneP getStringOne2oneP() {
        return this.stringOne2oneP;
    }
    
    public void setStringOne2oneP(StringOne2oneP stringOne2oneP) {
        this.stringOne2oneP = stringOne2oneP;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof StringOne2oneC) )
		    return false;

		 StringOne2oneC that = (StringOne2oneC) o;

		 return ( (this.getStringId()==that.getStringId()) || ( this.getStringId()!=null && that.getStringId()!=null && this.getStringId().equals(that.getStringId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getStringId() == null ? 0 : this.getStringId().hashCode() );

         return result;
    }


}

