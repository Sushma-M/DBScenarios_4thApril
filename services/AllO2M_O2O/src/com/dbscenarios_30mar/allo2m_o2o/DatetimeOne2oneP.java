/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * DatetimeOne2oneP generated by hbm2java
 */
@Entity
@Table(name="`Datetime_One2One_P`"
)

public class DatetimeOne2oneP  implements java.io.Serializable {

    
    
    @Type(type="DateTime")
    private LocalDateTime datetimeId;
    
    
    @Type(type="DateTime")
    private LocalDateTime datetime1;
    
    private DatetimeOne2oneC datetimeOne2oneC;

    public DatetimeOne2oneP() {
    }


    @Id 
    

    @Column(name="`DatetimeID`")
    public LocalDateTime getDatetimeId() {
        return this.datetimeId;
    }
    
    public void setDatetimeId(LocalDateTime datetimeId) {
        this.datetimeId = datetimeId;
    }

    

    @Column(name="`Datetime1`")
    public LocalDateTime getDatetime1() {
        return this.datetime1;
    }
    
    public void setDatetime1(LocalDateTime datetime1) {
        this.datetime1 = datetime1;
    }

    @Transient @OneToOne(fetch=FetchType.EAGER, mappedBy="datetimeOne2oneP")
    public DatetimeOne2oneC getDatetimeOne2oneC() {
        return this.datetimeOne2oneC;
    }
    
    public void setDatetimeOne2oneC(DatetimeOne2oneC datetimeOne2oneC) {
        this.datetimeOne2oneC = datetimeOne2oneC;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof DatetimeOne2oneP) )
		    return false;

		 DatetimeOne2oneP that = (DatetimeOne2oneP) o;

		 return ( (this.getDatetimeId()==that.getDatetimeId()) || ( this.getDatetimeId()!=null && that.getDatetimeId()!=null && this.getDatetimeId().equals(that.getDatetimeId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getDatetimeId() == null ? 0 : this.getDatetimeId().hashCode() );

         return result;
    }


}

