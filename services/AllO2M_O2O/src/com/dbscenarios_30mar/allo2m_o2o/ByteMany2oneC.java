/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ByteMany2oneC generated by hbm2java
 */
@Entity
@Table(name="`Byte_Many2One_C`"
)

public class ByteMany2oneC  implements java.io.Serializable {

    
    private Byte byteId;
    
    private ByteMany2oneP byteMany2oneP;

    public ByteMany2oneC() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`ByteID`", precision=2)
    public Byte getByteId() {
        return this.byteId;
    }
    
    public void setByteId(Byte byteId) {
        this.byteId = byteId;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`ByteCol1`")
    public ByteMany2oneP getByteMany2oneP() {
        return this.byteMany2oneP;
    }
    
    public void setByteMany2oneP(ByteMany2oneP byteMany2oneP) {
        this.byteMany2oneP = byteMany2oneP;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ByteMany2oneC) )
		    return false;

		 ByteMany2oneC that = (ByteMany2oneC) o;

		 return ( (this.getByteId()==that.getByteId()) || ( this.getByteId()!=null && that.getByteId()!=null && this.getByteId().equals(that.getByteId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getByteId() == null ? 0 : this.getByteId().hashCode() );

         return result;
    }


}

