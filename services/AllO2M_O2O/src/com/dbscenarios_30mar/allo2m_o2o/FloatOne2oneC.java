/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * FloatOne2oneC generated by hbm2java
 */
@Entity
@Table(name="`Float_One2One_C`"
)

public class FloatOne2oneC  implements java.io.Serializable {

    
    private Double floatId;
    
    private Double float1;
    
    private FloatOne2oneP floatOne2oneP;

    public FloatOne2oneC() {
    }


    @GenericGenerator(name="generator", strategy="foreign", parameters=@Parameter(name="property", value="floatOne2oneP"))@Id @GeneratedValue(generator="generator")
    

    @Column(name="`FloatID`", precision=12, scale=4)
    public Double getFloatId() {
        return this.floatId;
    }
    
    public void setFloatId(Double floatId) {
        this.floatId = floatId;
    }

    

    @Column(name="`Float1`", precision=12, scale=4)
    public Double getFloat1() {
        return this.float1;
    }
    
    public void setFloat1(Double float1) {
        this.float1 = float1;
    }

    @OneToOne(fetch=FetchType.EAGER) @PrimaryKeyJoinColumn
    public FloatOne2oneP getFloatOne2oneP() {
        return this.floatOne2oneP;
    }
    
    public void setFloatOne2oneP(FloatOne2oneP floatOne2oneP) {
        this.floatOne2oneP = floatOne2oneP;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof FloatOne2oneC) )
		    return false;

		 FloatOne2oneC that = (FloatOne2oneC) o;

		 return ( (this.getFloatId()==that.getFloatId()) || ( this.getFloatId()!=null && that.getFloatId()!=null && this.getFloatId().equals(that.getFloatId()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getFloatId() == null ? 0 : this.getFloatId().hashCode() );

         return result;
    }


}

