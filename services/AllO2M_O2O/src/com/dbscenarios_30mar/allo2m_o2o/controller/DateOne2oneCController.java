/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DateOne2oneCService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DateOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateOne2oneC
 */
@RestController(value = "AllO2M_O2O.DateOne2oneCController")
@RequestMapping("/AllO2M_O2O/DateOne2oneC")
@Api(description = "Exposes APIs to work with DateOne2oneC resource.", value = "DateOne2oneCController")
public class DateOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DateOne2oneCService")
    private DateOne2oneCService dateOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DateOne2oneC instances matching the search criteria.")
    public Page<DateOne2oneC> findDateOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateOne2oneCs list");
        return dateOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DateOne2oneC instances.")
    public Page<DateOne2oneC> getDateOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DateOne2oneCs list");
        return dateOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDateOne2oneCService(DateOne2oneCService service) {
        this.dateOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DateOne2oneC instance.")
    public DateOne2oneC createDateOne2oneC(@RequestBody DateOne2oneC instance) {
        LOGGER.debug("Create DateOne2oneC with information: {}", instance);
        instance = dateOne2oneCService.create(instance);
        LOGGER.debug("Created DateOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DateOne2oneC instances.")
    public Long countAllDateOne2oneCs() {
        LOGGER.debug("counting DateOne2oneCs");
        Long count = dateOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DateOne2oneC instance associated with the given id.")
    public DateOne2oneC getDateOne2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting DateOne2oneC with id: {}", id);
        DateOne2oneC instance = dateOne2oneCService.findById(id);
        LOGGER.debug("DateOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DateOne2oneC instance associated with the given id.")
    public DateOne2oneC editDateOne2oneC(@PathVariable(value = "id") Date id, @RequestBody DateOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DateOne2oneC with id: {}", instance.getDateId());
        instance.setDateId(id);
        instance = dateOne2oneCService.update(instance);
        LOGGER.debug("DateOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DateOne2oneC instance associated with the given id.")
    public boolean deleteDateOne2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateOne2oneC with id: {}", id);
        DateOne2oneC deleted = dateOne2oneCService.delete(id);
        return deleted != null;
    }
}
