/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.StringMany2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class StringMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringMany2oneC
 */
@RestController(value = "AllO2M_O2O.StringMany2oneCController")
@RequestMapping("/AllO2M_O2O/StringMany2oneC")
@Api(description = "Exposes APIs to work with StringMany2oneC resource.", value = "StringMany2oneCController")
public class StringMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StringMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringMany2oneCService")
    private StringMany2oneCService stringMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of StringMany2oneC instances matching the search criteria.")
    public Page<StringMany2oneC> findStringMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StringMany2oneCs list");
        return stringMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of StringMany2oneC instances.")
    public Page<StringMany2oneC> getStringMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering StringMany2oneCs list");
        return stringMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStringMany2oneCService(StringMany2oneCService service) {
        this.stringMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new StringMany2oneC instance.")
    public StringMany2oneC createStringMany2oneC(@RequestBody StringMany2oneC instance) {
        LOGGER.debug("Create StringMany2oneC with information: {}", instance);
        instance = stringMany2oneCService.create(instance);
        LOGGER.debug("Created StringMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of StringMany2oneC instances.")
    public Long countAllStringMany2oneCs() {
        LOGGER.debug("counting StringMany2oneCs");
        Long count = stringMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the StringMany2oneC instance associated with the given id.")
    public StringMany2oneC getStringMany2oneC(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting StringMany2oneC with id: {}", id);
        StringMany2oneC instance = stringMany2oneCService.findById(id);
        LOGGER.debug("StringMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the StringMany2oneC instance associated with the given id.")
    public StringMany2oneC editStringMany2oneC(@PathVariable(value = "id") String id, @RequestBody StringMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing StringMany2oneC with id: {}", instance.getStringId());
        instance.setStringId(id);
        instance = stringMany2oneCService.update(instance);
        LOGGER.debug("StringMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the StringMany2oneC instance associated with the given id.")
    public boolean deleteStringMany2oneC(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StringMany2oneC with id: {}", id);
        StringMany2oneC deleted = stringMany2oneCService.delete(id);
        return deleted != null;
    }
}
