/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.CharOne2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CharOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.CharOne2oneC
 */
@RestController(value = "AllO2M_O2O.CharOne2oneCController")
@RequestMapping("/AllO2M_O2O/CharOne2oneC")
@Api(description = "Exposes APIs to work with CharOne2oneC resource.", value = "CharOne2oneCController")
public class CharOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CharOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.CharOne2oneCService")
    private CharOne2oneCService charOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CharOne2oneC instances matching the search criteria.")
    public Page<CharOne2oneC> findCharOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CharOne2oneCs list");
        return charOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CharOne2oneC instances.")
    public Page<CharOne2oneC> getCharOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering CharOne2oneCs list");
        return charOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCharOne2oneCService(CharOne2oneCService service) {
        this.charOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CharOne2oneC instance.")
    public CharOne2oneC createCharOne2oneC(@RequestBody CharOne2oneC instance) {
        LOGGER.debug("Create CharOne2oneC with information: {}", instance);
        instance = charOne2oneCService.create(instance);
        LOGGER.debug("Created CharOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CharOne2oneC instances.")
    public Long countAllCharOne2oneCs() {
        LOGGER.debug("counting CharOne2oneCs");
        Long count = charOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CharOne2oneC instance associated with the given id.")
    public CharOne2oneC getCharOne2oneC(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Getting CharOne2oneC with id: {}", id);
        CharOne2oneC instance = charOne2oneCService.findById(id);
        LOGGER.debug("CharOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CharOne2oneC instance associated with the given id.")
    public CharOne2oneC editCharOne2oneC(@PathVariable(value = "id") Character id, @RequestBody CharOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CharOne2oneC with id: {}", instance.getCharId());
        instance.setCharId(id);
        instance = charOne2oneCService.update(instance);
        LOGGER.debug("CharOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CharOne2oneC instance associated with the given id.")
    public boolean deleteCharOne2oneC(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CharOne2oneC with id: {}", id);
        CharOne2oneC deleted = charOne2oneCService.delete(id);
        return deleted != null;
    }
}
