/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DateOne2onePService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DateOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateOne2oneP
 */
@RestController(value = "AllO2M_O2O.DateOne2onePController")
@RequestMapping("/AllO2M_O2O/DateOne2oneP")
@Api(description = "Exposes APIs to work with DateOne2oneP resource.", value = "DateOne2onePController")
public class DateOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DateOne2onePService")
    private DateOne2onePService dateOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DateOne2oneP instances matching the search criteria.")
    public Page<DateOne2oneP> findDateOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateOne2onePs list");
        return dateOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DateOne2oneP instances.")
    public Page<DateOne2oneP> getDateOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DateOne2onePs list");
        return dateOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDateOne2onePService(DateOne2onePService service) {
        this.dateOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DateOne2oneP instance.")
    public DateOne2oneP createDateOne2oneP(@RequestBody DateOne2oneP instance) {
        LOGGER.debug("Create DateOne2oneP with information: {}", instance);
        instance = dateOne2onePService.create(instance);
        LOGGER.debug("Created DateOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DateOne2oneP instances.")
    public Long countAllDateOne2onePs() {
        LOGGER.debug("counting DateOne2onePs");
        Long count = dateOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DateOne2oneP instance associated with the given id.")
    public DateOne2oneP getDateOne2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting DateOne2oneP with id: {}", id);
        DateOne2oneP instance = dateOne2onePService.findById(id);
        LOGGER.debug("DateOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DateOne2oneP instance associated with the given id.")
    public DateOne2oneP editDateOne2oneP(@PathVariable(value = "id") Date id, @RequestBody DateOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DateOne2oneP with id: {}", instance.getDateId());
        instance.setDateId(id);
        instance = dateOne2onePService.update(instance);
        LOGGER.debug("DateOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DateOne2oneP instance associated with the given id.")
    public boolean deleteDateOne2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateOne2oneP with id: {}", id);
        DateOne2oneP deleted = dateOne2onePService.delete(id);
        return deleted != null;
    }
}
