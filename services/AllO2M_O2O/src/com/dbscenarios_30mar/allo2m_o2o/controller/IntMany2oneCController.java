/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.IntMany2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class IntMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntMany2oneC
 */
@RestController(value = "AllO2M_O2O.IntMany2oneCController")
@RequestMapping("/AllO2M_O2O/IntMany2oneC")
@Api(description = "Exposes APIs to work with IntMany2oneC resource.", value = "IntMany2oneCController")
public class IntMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntMany2oneCService")
    private IntMany2oneCService intMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of IntMany2oneC instances matching the search criteria.")
    public Page<IntMany2oneC> findIntMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IntMany2oneCs list");
        return intMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IntMany2oneC instances.")
    public Page<IntMany2oneC> getIntMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering IntMany2oneCs list");
        return intMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setIntMany2oneCService(IntMany2oneCService service) {
        this.intMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new IntMany2oneC instance.")
    public IntMany2oneC createIntMany2oneC(@RequestBody IntMany2oneC instance) {
        LOGGER.debug("Create IntMany2oneC with information: {}", instance);
        instance = intMany2oneCService.create(instance);
        LOGGER.debug("Created IntMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of IntMany2oneC instances.")
    public Long countAllIntMany2oneCs() {
        LOGGER.debug("counting IntMany2oneCs");
        Long count = intMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the IntMany2oneC instance associated with the given id.")
    public IntMany2oneC getIntMany2oneC(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IntMany2oneC with id: {}", id);
        IntMany2oneC instance = intMany2oneCService.findById(id);
        LOGGER.debug("IntMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the IntMany2oneC instance associated with the given id.")
    public IntMany2oneC editIntMany2oneC(@PathVariable(value = "id") Integer id, @RequestBody IntMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing IntMany2oneC with id: {}", instance.getId());
        instance.setId(id);
        instance = intMany2oneCService.update(instance);
        LOGGER.debug("IntMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the IntMany2oneC instance associated with the given id.")
    public boolean deleteIntMany2oneC(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IntMany2oneC with id: {}", id);
        IntMany2oneC deleted = intMany2oneCService.delete(id);
        return deleted != null;
    }
}
