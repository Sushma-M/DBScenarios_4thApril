/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.BigdecOne2oneCService;
import java.math.BigDecimal;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BigdecOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecOne2oneC
 */
@RestController(value = "AllO2M_O2O.BigdecOne2oneCController")
@RequestMapping("/AllO2M_O2O/BigdecOne2oneC")
@Api(description = "Exposes APIs to work with BigdecOne2oneC resource.", value = "BigdecOne2oneCController")
public class BigdecOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecOne2oneCService")
    private BigdecOne2oneCService bigdecOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BigdecOne2oneC instances matching the search criteria.")
    public Page<BigdecOne2oneC> findBigdecOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigdecOne2oneCs list");
        return bigdecOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BigdecOne2oneC instances.")
    public Page<BigdecOne2oneC> getBigdecOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering BigdecOne2oneCs list");
        return bigdecOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBigdecOne2oneCService(BigdecOne2oneCService service) {
        this.bigdecOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BigdecOne2oneC instance.")
    public BigdecOne2oneC createBigdecOne2oneC(@RequestBody BigdecOne2oneC instance) {
        LOGGER.debug("Create BigdecOne2oneC with information: {}", instance);
        instance = bigdecOne2oneCService.create(instance);
        LOGGER.debug("Created BigdecOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BigdecOne2oneC instances.")
    public Long countAllBigdecOne2oneCs() {
        LOGGER.debug("counting BigdecOne2oneCs");
        Long count = bigdecOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BigdecOne2oneC instance associated with the given id.")
    public BigdecOne2oneC getBigdecOne2oneC(@PathVariable(value = "id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigdecOne2oneC with id: {}", id);
        BigdecOne2oneC instance = bigdecOne2oneCService.findById(id);
        LOGGER.debug("BigdecOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BigdecOne2oneC instance associated with the given id.")
    public BigdecOne2oneC editBigdecOne2oneC(@PathVariable(value = "id") BigDecimal id, @RequestBody BigdecOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigdecOne2oneC with id: {}", instance.getBigdecId());
        instance.setBigdecId(id);
        instance = bigdecOne2oneCService.update(instance);
        LOGGER.debug("BigdecOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BigdecOne2oneC instance associated with the given id.")
    public boolean deleteBigdecOne2oneC(@PathVariable(value = "id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigdecOne2oneC with id: {}", id);
        BigdecOne2oneC deleted = bigdecOne2oneCService.delete(id);
        return deleted != null;
    }
}
