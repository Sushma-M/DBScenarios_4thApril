/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeStampOne2oneCService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeStampOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeStampOne2oneC
 */
@RestController(value = "AllO2M_O2O.TimeStampOne2oneCController")
@RequestMapping("/AllO2M_O2O/TimeStampOne2oneC")
@Api(description = "Exposes APIs to work with TimeStampOne2oneC resource.", value = "TimeStampOne2oneCController")
public class TimeStampOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeStampOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeStampOne2oneCService")
    private TimeStampOne2oneCService timeStampOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeStampOne2oneC instances matching the search criteria.")
    public Page<TimeStampOne2oneC> findTimeStampOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeStampOne2oneCs list");
        return timeStampOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeStampOne2oneC instances.")
    public Page<TimeStampOne2oneC> getTimeStampOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering TimeStampOne2oneCs list");
        return timeStampOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeStampOne2oneCService(TimeStampOne2oneCService service) {
        this.timeStampOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeStampOne2oneC instance.")
    public TimeStampOne2oneC createTimeStampOne2oneC(@RequestBody TimeStampOne2oneC instance) {
        LOGGER.debug("Create TimeStampOne2oneC with information: {}", instance);
        instance = timeStampOne2oneCService.create(instance);
        LOGGER.debug("Created TimeStampOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeStampOne2oneC instances.")
    public Long countAllTimeStampOne2oneCs() {
        LOGGER.debug("counting TimeStampOne2oneCs");
        Long count = timeStampOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeStampOne2oneC instance associated with the given id.")
    public TimeStampOne2oneC getTimeStampOne2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeStampOne2oneC with id: {}", id);
        TimeStampOne2oneC instance = timeStampOne2oneCService.findById(id);
        LOGGER.debug("TimeStampOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeStampOne2oneC instance associated with the given id.")
    public TimeStampOne2oneC editTimeStampOne2oneC(@PathVariable(value = "id") Date id, @RequestBody TimeStampOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeStampOne2oneC with id: {}", instance.getTimestampId());
        instance.setTimestampId(id);
        instance = timeStampOne2oneCService.update(instance);
        LOGGER.debug("TimeStampOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeStampOne2oneC instance associated with the given id.")
    public boolean deleteTimeStampOne2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeStampOne2oneC with id: {}", id);
        TimeStampOne2oneC deleted = timeStampOne2oneCService.delete(id);
        return deleted != null;
    }
}
