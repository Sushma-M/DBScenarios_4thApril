/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeStampMany2oneCService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeStampMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeStampMany2oneC
 */
@RestController(value = "AllO2M_O2O.TimeStampMany2oneCController")
@RequestMapping("/AllO2M_O2O/TimeStampMany2oneC")
@Api(description = "Exposes APIs to work with TimeStampMany2oneC resource.", value = "TimeStampMany2oneCController")
public class TimeStampMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeStampMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeStampMany2oneCService")
    private TimeStampMany2oneCService timeStampMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeStampMany2oneC instances matching the search criteria.")
    public Page<TimeStampMany2oneC> findTimeStampMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeStampMany2oneCs list");
        return timeStampMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeStampMany2oneC instances.")
    public Page<TimeStampMany2oneC> getTimeStampMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering TimeStampMany2oneCs list");
        return timeStampMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeStampMany2oneCService(TimeStampMany2oneCService service) {
        this.timeStampMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeStampMany2oneC instance.")
    public TimeStampMany2oneC createTimeStampMany2oneC(@RequestBody TimeStampMany2oneC instance) {
        LOGGER.debug("Create TimeStampMany2oneC with information: {}", instance);
        instance = timeStampMany2oneCService.create(instance);
        LOGGER.debug("Created TimeStampMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeStampMany2oneC instances.")
    public Long countAllTimeStampMany2oneCs() {
        LOGGER.debug("counting TimeStampMany2oneCs");
        Long count = timeStampMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeStampMany2oneC instance associated with the given id.")
    public TimeStampMany2oneC getTimeStampMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeStampMany2oneC with id: {}", id);
        TimeStampMany2oneC instance = timeStampMany2oneCService.findById(id);
        LOGGER.debug("TimeStampMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeStampMany2oneC instance associated with the given id.")
    public TimeStampMany2oneC editTimeStampMany2oneC(@PathVariable(value = "id") Date id, @RequestBody TimeStampMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeStampMany2oneC with id: {}", instance.getTimeStampId());
        instance.setTimeStampId(id);
        instance = timeStampMany2oneCService.update(instance);
        LOGGER.debug("TimeStampMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeStampMany2oneC instance associated with the given id.")
    public boolean deleteTimeStampMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeStampMany2oneC with id: {}", id);
        TimeStampMany2oneC deleted = timeStampMany2oneCService.delete(id);
        return deleted != null;
    }
}
