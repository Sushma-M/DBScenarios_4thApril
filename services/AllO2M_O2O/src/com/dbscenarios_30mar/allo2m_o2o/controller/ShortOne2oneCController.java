/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.ShortOne2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ShortOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.ShortOne2oneC
 */
@RestController(value = "AllO2M_O2O.ShortOne2oneCController")
@RequestMapping("/AllO2M_O2O/ShortOne2oneC")
@Api(description = "Exposes APIs to work with ShortOne2oneC resource.", value = "ShortOne2oneCController")
public class ShortOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ShortOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ShortOne2oneCService")
    private ShortOne2oneCService shortOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ShortOne2oneC instances matching the search criteria.")
    public Page<ShortOne2oneC> findShortOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ShortOne2oneCs list");
        return shortOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ShortOne2oneC instances.")
    public Page<ShortOne2oneC> getShortOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering ShortOne2oneCs list");
        return shortOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setShortOne2oneCService(ShortOne2oneCService service) {
        this.shortOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ShortOne2oneC instance.")
    public ShortOne2oneC createShortOne2oneC(@RequestBody ShortOne2oneC instance) {
        LOGGER.debug("Create ShortOne2oneC with information: {}", instance);
        instance = shortOne2oneCService.create(instance);
        LOGGER.debug("Created ShortOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ShortOne2oneC instances.")
    public Long countAllShortOne2oneCs() {
        LOGGER.debug("counting ShortOne2oneCs");
        Long count = shortOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ShortOne2oneC instance associated with the given id.")
    public ShortOne2oneC getShortOne2oneC(@PathVariable(value = "id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting ShortOne2oneC with id: {}", id);
        ShortOne2oneC instance = shortOne2oneCService.findById(id);
        LOGGER.debug("ShortOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ShortOne2oneC instance associated with the given id.")
    public ShortOne2oneC editShortOne2oneC(@PathVariable(value = "id") Short id, @RequestBody ShortOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ShortOne2oneC with id: {}", instance.getShortId());
        instance.setShortId(id);
        instance = shortOne2oneCService.update(instance);
        LOGGER.debug("ShortOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ShortOne2oneC instance associated with the given id.")
    public boolean deleteShortOne2oneC(@PathVariable(value = "id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ShortOne2oneC with id: {}", id);
        ShortOne2oneC deleted = shortOne2oneCService.delete(id);
        return deleted != null;
    }
}
