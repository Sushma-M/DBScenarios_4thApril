/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.LongOne2onePService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class LongOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.LongOne2oneP
 */
@RestController(value = "AllO2M_O2O.LongOne2onePController")
@RequestMapping("/AllO2M_O2O/LongOne2oneP")
@Api(description = "Exposes APIs to work with LongOne2oneP resource.", value = "LongOne2onePController")
public class LongOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LongOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.LongOne2onePService")
    private LongOne2onePService longOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of LongOne2oneP instances matching the search criteria.")
    public Page<LongOne2oneP> findLongOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LongOne2onePs list");
        return longOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of LongOne2oneP instances.")
    public Page<LongOne2oneP> getLongOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering LongOne2onePs list");
        return longOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setLongOne2onePService(LongOne2onePService service) {
        this.longOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new LongOne2oneP instance.")
    public LongOne2oneP createLongOne2oneP(@RequestBody LongOne2oneP instance) {
        LOGGER.debug("Create LongOne2oneP with information: {}", instance);
        instance = longOne2onePService.create(instance);
        LOGGER.debug("Created LongOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of LongOne2oneP instances.")
    public Long countAllLongOne2onePs() {
        LOGGER.debug("counting LongOne2onePs");
        Long count = longOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the LongOne2oneP instance associated with the given id.")
    public LongOne2oneP getLongOne2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting LongOne2oneP with id: {}", id);
        LongOne2oneP instance = longOne2onePService.findById(id);
        LOGGER.debug("LongOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the LongOne2oneP instance associated with the given id.")
    public LongOne2oneP editLongOne2oneP(@PathVariable(value = "id") BigInteger id, @RequestBody LongOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing LongOne2oneP with id: {}", instance.getLongId());
        instance.setLongId(id);
        instance = longOne2onePService.update(instance);
        LOGGER.debug("LongOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the LongOne2oneP instance associated with the given id.")
    public boolean deleteLongOne2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LongOne2oneP with id: {}", id);
        LongOne2oneP deleted = longOne2onePService.delete(id);
        return deleted != null;
    }
}
