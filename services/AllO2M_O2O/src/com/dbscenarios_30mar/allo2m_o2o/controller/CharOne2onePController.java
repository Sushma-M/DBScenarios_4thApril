/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.CharOne2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CharOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.CharOne2oneP
 */
@RestController(value = "AllO2M_O2O.CharOne2onePController")
@RequestMapping("/AllO2M_O2O/CharOne2oneP")
@Api(description = "Exposes APIs to work with CharOne2oneP resource.", value = "CharOne2onePController")
public class CharOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CharOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.CharOne2onePService")
    private CharOne2onePService charOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CharOne2oneP instances matching the search criteria.")
    public Page<CharOne2oneP> findCharOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CharOne2onePs list");
        return charOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CharOne2oneP instances.")
    public Page<CharOne2oneP> getCharOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering CharOne2onePs list");
        return charOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCharOne2onePService(CharOne2onePService service) {
        this.charOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CharOne2oneP instance.")
    public CharOne2oneP createCharOne2oneP(@RequestBody CharOne2oneP instance) {
        LOGGER.debug("Create CharOne2oneP with information: {}", instance);
        instance = charOne2onePService.create(instance);
        LOGGER.debug("Created CharOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CharOne2oneP instances.")
    public Long countAllCharOne2onePs() {
        LOGGER.debug("counting CharOne2onePs");
        Long count = charOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CharOne2oneP instance associated with the given id.")
    public CharOne2oneP getCharOne2oneP(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Getting CharOne2oneP with id: {}", id);
        CharOne2oneP instance = charOne2onePService.findById(id);
        LOGGER.debug("CharOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CharOne2oneP instance associated with the given id.")
    public CharOne2oneP editCharOne2oneP(@PathVariable(value = "id") Character id, @RequestBody CharOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CharOne2oneP with id: {}", instance.getCharId());
        instance.setCharId(id);
        instance = charOne2onePService.update(instance);
        LOGGER.debug("CharOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CharOne2oneP instance associated with the given id.")
    public boolean deleteCharOne2oneP(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CharOne2oneP with id: {}", id);
        CharOne2oneP deleted = charOne2onePService.delete(id);
        return deleted != null;
    }
}
