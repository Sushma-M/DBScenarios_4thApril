/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.IntOne2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class IntOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntOne2oneC
 */
@RestController(value = "AllO2M_O2O.IntOne2oneCController")
@RequestMapping("/AllO2M_O2O/IntOne2oneC")
@Api(description = "Exposes APIs to work with IntOne2oneC resource.", value = "IntOne2oneCController")
public class IntOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntOne2oneCService")
    private IntOne2oneCService intOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of IntOne2oneC instances matching the search criteria.")
    public Page<IntOne2oneC> findIntOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IntOne2oneCs list");
        return intOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IntOne2oneC instances.")
    public Page<IntOne2oneC> getIntOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering IntOne2oneCs list");
        return intOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setIntOne2oneCService(IntOne2oneCService service) {
        this.intOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new IntOne2oneC instance.")
    public IntOne2oneC createIntOne2oneC(@RequestBody IntOne2oneC instance) {
        LOGGER.debug("Create IntOne2oneC with information: {}", instance);
        instance = intOne2oneCService.create(instance);
        LOGGER.debug("Created IntOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of IntOne2oneC instances.")
    public Long countAllIntOne2oneCs() {
        LOGGER.debug("counting IntOne2oneCs");
        Long count = intOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the IntOne2oneC instance associated with the given id.")
    public IntOne2oneC getIntOne2oneC(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IntOne2oneC with id: {}", id);
        IntOne2oneC instance = intOne2oneCService.findById(id);
        LOGGER.debug("IntOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the IntOne2oneC instance associated with the given id.")
    public IntOne2oneC editIntOne2oneC(@PathVariable(value = "id") Integer id, @RequestBody IntOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing IntOne2oneC with id: {}", instance.getIntId());
        instance.setIntId(id);
        instance = intOne2oneCService.update(instance);
        LOGGER.debug("IntOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the IntOne2oneC instance associated with the given id.")
    public boolean deleteIntOne2oneC(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IntOne2oneC with id: {}", id);
        IntOne2oneC deleted = intOne2oneCService.delete(id);
        return deleted != null;
    }
}
