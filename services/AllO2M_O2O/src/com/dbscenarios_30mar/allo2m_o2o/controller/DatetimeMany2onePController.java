/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DatetimeMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.DatetimeMany2onePService;
import org.joda.time.LocalDateTime;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DatetimeMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeMany2oneP
 */
@RestController(value = "AllO2M_O2O.DatetimeMany2onePController")
@RequestMapping("/AllO2M_O2O/DatetimeMany2oneP")
@Api(description = "Exposes APIs to work with DatetimeMany2oneP resource.", value = "DatetimeMany2onePController")
public class DatetimeMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeMany2onePService")
    private DatetimeMany2onePService datetimeMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeMany2oneCService")
    private DatetimeMany2oneCService datetimeMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DatetimeMany2oneP instances matching the search criteria.")
    public Page<DatetimeMany2oneP> findDatetimeMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeMany2onePs list");
        return datetimeMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DatetimeMany2oneP instances.")
    public Page<DatetimeMany2oneP> getDatetimeMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DatetimeMany2onePs list");
        return datetimeMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/datetimeMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the datetimeMany2oneCs instance associated with the given id.")
    public Page<DatetimeMany2oneC> findAssociateddatetimeMany2oneCs(Pageable pageable, @PathVariable("id") LocalDateTime id) {
        LOGGER.debug("Fetching all associated datetimeMany2oneCs");
        return datetimeMany2oneCService.findAssociatedValues(id, "datetimeMany2oneP", "datetimeId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDatetimeMany2onePService(DatetimeMany2onePService service) {
        this.datetimeMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DatetimeMany2oneP instance.")
    public DatetimeMany2oneP createDatetimeMany2oneP(@RequestBody DatetimeMany2oneP instance) {
        LOGGER.debug("Create DatetimeMany2oneP with information: {}", instance);
        instance = datetimeMany2onePService.create(instance);
        LOGGER.debug("Created DatetimeMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DatetimeMany2oneP instances.")
    public Long countAllDatetimeMany2onePs() {
        LOGGER.debug("counting DatetimeMany2onePs");
        Long count = datetimeMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DatetimeMany2oneP instance associated with the given id.")
    public DatetimeMany2oneP getDatetimeMany2oneP(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeMany2oneP with id: {}", id);
        DatetimeMany2oneP instance = datetimeMany2onePService.findById(id);
        LOGGER.debug("DatetimeMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DatetimeMany2oneP instance associated with the given id.")
    public DatetimeMany2oneP editDatetimeMany2oneP(@PathVariable(value = "id") LocalDateTime id, @RequestBody DatetimeMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeMany2oneP with id: {}", instance.getDatetimeId());
        instance.setDatetimeId(id);
        instance = datetimeMany2onePService.update(instance);
        LOGGER.debug("DatetimeMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DatetimeMany2oneP instance associated with the given id.")
    public boolean deleteDatetimeMany2oneP(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeMany2oneP with id: {}", id);
        DatetimeMany2oneP deleted = datetimeMany2onePService.delete(id);
        return deleted != null;
    }
}
