/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.FloatMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.FloatMany2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class FloatMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.FloatMany2oneP
 */
@RestController(value = "AllO2M_O2O.FloatMany2onePController")
@RequestMapping("/AllO2M_O2O/FloatMany2oneP")
@Api(description = "Exposes APIs to work with FloatMany2oneP resource.", value = "FloatMany2onePController")
public class FloatMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FloatMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.FloatMany2onePService")
    private FloatMany2onePService floatMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.FloatMany2oneCService")
    private FloatMany2oneCService floatMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of FloatMany2oneP instances matching the search criteria.")
    public Page<FloatMany2oneP> findFloatMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FloatMany2onePs list");
        return floatMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of FloatMany2oneP instances.")
    public Page<FloatMany2oneP> getFloatMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering FloatMany2onePs list");
        return floatMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/floatMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the floatMany2oneCs instance associated with the given id.")
    public Page<FloatMany2oneC> findAssociatedfloatMany2oneCs(Pageable pageable, @PathVariable("id") Double id) {
        LOGGER.debug("Fetching all associated floatMany2oneCs");
        return floatMany2oneCService.findAssociatedValues(id, "floatMany2oneP", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setFloatMany2onePService(FloatMany2onePService service) {
        this.floatMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new FloatMany2oneP instance.")
    public FloatMany2oneP createFloatMany2oneP(@RequestBody FloatMany2oneP instance) {
        LOGGER.debug("Create FloatMany2oneP with information: {}", instance);
        instance = floatMany2onePService.create(instance);
        LOGGER.debug("Created FloatMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of FloatMany2oneP instances.")
    public Long countAllFloatMany2onePs() {
        LOGGER.debug("counting FloatMany2onePs");
        Long count = floatMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the FloatMany2oneP instance associated with the given id.")
    public FloatMany2oneP getFloatMany2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting FloatMany2oneP with id: {}", id);
        FloatMany2oneP instance = floatMany2onePService.findById(id);
        LOGGER.debug("FloatMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the FloatMany2oneP instance associated with the given id.")
    public FloatMany2oneP editFloatMany2oneP(@PathVariable(value = "id") Double id, @RequestBody FloatMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing FloatMany2oneP with id: {}", instance.getId());
        instance.setId(id);
        instance = floatMany2onePService.update(instance);
        LOGGER.debug("FloatMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the FloatMany2oneP instance associated with the given id.")
    public boolean deleteFloatMany2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FloatMany2oneP with id: {}", id);
        FloatMany2oneP deleted = floatMany2onePService.delete(id);
        return deleted != null;
    }
}
