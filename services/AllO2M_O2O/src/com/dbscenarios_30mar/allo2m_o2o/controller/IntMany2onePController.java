/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.IntMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.IntMany2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class IntMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntMany2oneP
 */
@RestController(value = "AllO2M_O2O.IntMany2onePController")
@RequestMapping("/AllO2M_O2O/IntMany2oneP")
@Api(description = "Exposes APIs to work with IntMany2oneP resource.", value = "IntMany2onePController")
public class IntMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntMany2onePService")
    private IntMany2onePService intMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.IntMany2oneCService")
    private IntMany2oneCService intMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of IntMany2oneP instances matching the search criteria.")
    public Page<IntMany2oneP> findIntMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IntMany2onePs list");
        return intMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IntMany2oneP instances.")
    public Page<IntMany2oneP> getIntMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering IntMany2onePs list");
        return intMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/intMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the intMany2oneCs instance associated with the given id.")
    public Page<IntMany2oneC> findAssociatedintMany2oneCs(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated intMany2oneCs");
        return intMany2oneCService.findAssociatedValues(id, "intMany2oneP", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setIntMany2onePService(IntMany2onePService service) {
        this.intMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new IntMany2oneP instance.")
    public IntMany2oneP createIntMany2oneP(@RequestBody IntMany2oneP instance) {
        LOGGER.debug("Create IntMany2oneP with information: {}", instance);
        instance = intMany2onePService.create(instance);
        LOGGER.debug("Created IntMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of IntMany2oneP instances.")
    public Long countAllIntMany2onePs() {
        LOGGER.debug("counting IntMany2onePs");
        Long count = intMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the IntMany2oneP instance associated with the given id.")
    public IntMany2oneP getIntMany2oneP(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IntMany2oneP with id: {}", id);
        IntMany2oneP instance = intMany2onePService.findById(id);
        LOGGER.debug("IntMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the IntMany2oneP instance associated with the given id.")
    public IntMany2oneP editIntMany2oneP(@PathVariable(value = "id") Integer id, @RequestBody IntMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing IntMany2oneP with id: {}", instance.getId());
        instance.setId(id);
        instance = intMany2onePService.update(instance);
        LOGGER.debug("IntMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the IntMany2oneP instance associated with the given id.")
    public boolean deleteIntMany2oneP(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IntMany2oneP with id: {}", id);
        IntMany2oneP deleted = intMany2onePService.delete(id);
        return deleted != null;
    }
}
