/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DoubleMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.DoubleMany2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DoubleMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleMany2oneP
 */
@RestController(value = "AllO2M_O2O.DoubleMany2onePController")
@RequestMapping("/AllO2M_O2O/DoubleMany2oneP")
@Api(description = "Exposes APIs to work with DoubleMany2oneP resource.", value = "DoubleMany2onePController")
public class DoubleMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleMany2onePService")
    private DoubleMany2onePService doubleMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleMany2oneCService")
    private DoubleMany2oneCService doubleMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DoubleMany2oneP instances matching the search criteria.")
    public Page<DoubleMany2oneP> findDoubleMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DoubleMany2onePs list");
        return doubleMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DoubleMany2oneP instances.")
    public Page<DoubleMany2oneP> getDoubleMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DoubleMany2onePs list");
        return doubleMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/doubleMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the doubleMany2oneCs instance associated with the given id.")
    public Page<DoubleMany2oneC> findAssociateddoubleMany2oneCs(Pageable pageable, @PathVariable("id") Double id) {
        LOGGER.debug("Fetching all associated doubleMany2oneCs");
        return doubleMany2oneCService.findAssociatedValues(id, "doubleMany2oneP", "doubleId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDoubleMany2onePService(DoubleMany2onePService service) {
        this.doubleMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DoubleMany2oneP instance.")
    public DoubleMany2oneP createDoubleMany2oneP(@RequestBody DoubleMany2oneP instance) {
        LOGGER.debug("Create DoubleMany2oneP with information: {}", instance);
        instance = doubleMany2onePService.create(instance);
        LOGGER.debug("Created DoubleMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DoubleMany2oneP instances.")
    public Long countAllDoubleMany2onePs() {
        LOGGER.debug("counting DoubleMany2onePs");
        Long count = doubleMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DoubleMany2oneP instance associated with the given id.")
    public DoubleMany2oneP getDoubleMany2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting DoubleMany2oneP with id: {}", id);
        DoubleMany2oneP instance = doubleMany2onePService.findById(id);
        LOGGER.debug("DoubleMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DoubleMany2oneP instance associated with the given id.")
    public DoubleMany2oneP editDoubleMany2oneP(@PathVariable(value = "id") Double id, @RequestBody DoubleMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DoubleMany2oneP with id: {}", instance.getDoubleId());
        instance.setDoubleId(id);
        instance = doubleMany2onePService.update(instance);
        LOGGER.debug("DoubleMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DoubleMany2oneP instance associated with the given id.")
    public boolean deleteDoubleMany2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DoubleMany2oneP with id: {}", id);
        DoubleMany2oneP deleted = doubleMany2onePService.delete(id);
        return deleted != null;
    }
}
