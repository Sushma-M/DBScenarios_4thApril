/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DoubleOne2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DoubleOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleOne2oneP
 */
@RestController(value = "AllO2M_O2O.DoubleOne2onePController")
@RequestMapping("/AllO2M_O2O/DoubleOne2oneP")
@Api(description = "Exposes APIs to work with DoubleOne2oneP resource.", value = "DoubleOne2onePController")
public class DoubleOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleOne2onePService")
    private DoubleOne2onePService doubleOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DoubleOne2oneP instances matching the search criteria.")
    public Page<DoubleOne2oneP> findDoubleOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DoubleOne2onePs list");
        return doubleOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DoubleOne2oneP instances.")
    public Page<DoubleOne2oneP> getDoubleOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DoubleOne2onePs list");
        return doubleOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDoubleOne2onePService(DoubleOne2onePService service) {
        this.doubleOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DoubleOne2oneP instance.")
    public DoubleOne2oneP createDoubleOne2oneP(@RequestBody DoubleOne2oneP instance) {
        LOGGER.debug("Create DoubleOne2oneP with information: {}", instance);
        instance = doubleOne2onePService.create(instance);
        LOGGER.debug("Created DoubleOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DoubleOne2oneP instances.")
    public Long countAllDoubleOne2onePs() {
        LOGGER.debug("counting DoubleOne2onePs");
        Long count = doubleOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DoubleOne2oneP instance associated with the given id.")
    public DoubleOne2oneP getDoubleOne2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting DoubleOne2oneP with id: {}", id);
        DoubleOne2oneP instance = doubleOne2onePService.findById(id);
        LOGGER.debug("DoubleOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DoubleOne2oneP instance associated with the given id.")
    public DoubleOne2oneP editDoubleOne2oneP(@PathVariable(value = "id") Double id, @RequestBody DoubleOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DoubleOne2oneP with id: {}", instance.getDoubleId());
        instance.setDoubleId(id);
        instance = doubleOne2onePService.update(instance);
        LOGGER.debug("DoubleOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DoubleOne2oneP instance associated with the given id.")
    public boolean deleteDoubleOne2oneP(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DoubleOne2oneP with id: {}", id);
        DoubleOne2oneP deleted = doubleOne2onePService.delete(id);
        return deleted != null;
    }
}
