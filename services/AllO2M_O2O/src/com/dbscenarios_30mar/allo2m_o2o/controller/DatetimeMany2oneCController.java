/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DatetimeMany2oneCService;
import org.joda.time.LocalDateTime;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DatetimeMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeMany2oneC
 */
@RestController(value = "AllO2M_O2O.DatetimeMany2oneCController")
@RequestMapping("/AllO2M_O2O/DatetimeMany2oneC")
@Api(description = "Exposes APIs to work with DatetimeMany2oneC resource.", value = "DatetimeMany2oneCController")
public class DatetimeMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeMany2oneCService")
    private DatetimeMany2oneCService datetimeMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DatetimeMany2oneC instances matching the search criteria.")
    public Page<DatetimeMany2oneC> findDatetimeMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeMany2oneCs list");
        return datetimeMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DatetimeMany2oneC instances.")
    public Page<DatetimeMany2oneC> getDatetimeMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DatetimeMany2oneCs list");
        return datetimeMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDatetimeMany2oneCService(DatetimeMany2oneCService service) {
        this.datetimeMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DatetimeMany2oneC instance.")
    public DatetimeMany2oneC createDatetimeMany2oneC(@RequestBody DatetimeMany2oneC instance) {
        LOGGER.debug("Create DatetimeMany2oneC with information: {}", instance);
        instance = datetimeMany2oneCService.create(instance);
        LOGGER.debug("Created DatetimeMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DatetimeMany2oneC instances.")
    public Long countAllDatetimeMany2oneCs() {
        LOGGER.debug("counting DatetimeMany2oneCs");
        Long count = datetimeMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DatetimeMany2oneC instance associated with the given id.")
    public DatetimeMany2oneC getDatetimeMany2oneC(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeMany2oneC with id: {}", id);
        DatetimeMany2oneC instance = datetimeMany2oneCService.findById(id);
        LOGGER.debug("DatetimeMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DatetimeMany2oneC instance associated with the given id.")
    public DatetimeMany2oneC editDatetimeMany2oneC(@PathVariable(value = "id") LocalDateTime id, @RequestBody DatetimeMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeMany2oneC with id: {}", instance.getDatetimeId());
        instance.setDatetimeId(id);
        instance = datetimeMany2oneCService.update(instance);
        LOGGER.debug("DatetimeMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DatetimeMany2oneC instance associated with the given id.")
    public boolean deleteDatetimeMany2oneC(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeMany2oneC with id: {}", id);
        DatetimeMany2oneC deleted = datetimeMany2oneCService.delete(id);
        return deleted != null;
    }
}
