/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.IntOne2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class IntOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntOne2oneP
 */
@RestController(value = "AllO2M_O2O.IntOne2onePController")
@RequestMapping("/AllO2M_O2O/IntOne2oneP")
@Api(description = "Exposes APIs to work with IntOne2oneP resource.", value = "IntOne2onePController")
public class IntOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntOne2onePService")
    private IntOne2onePService intOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of IntOne2oneP instances matching the search criteria.")
    public Page<IntOne2oneP> findIntOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IntOne2onePs list");
        return intOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of IntOne2oneP instances.")
    public Page<IntOne2oneP> getIntOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering IntOne2onePs list");
        return intOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setIntOne2onePService(IntOne2onePService service) {
        this.intOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new IntOne2oneP instance.")
    public IntOne2oneP createIntOne2oneP(@RequestBody IntOne2oneP instance) {
        LOGGER.debug("Create IntOne2oneP with information: {}", instance);
        instance = intOne2onePService.create(instance);
        LOGGER.debug("Created IntOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of IntOne2oneP instances.")
    public Long countAllIntOne2onePs() {
        LOGGER.debug("counting IntOne2onePs");
        Long count = intOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the IntOne2oneP instance associated with the given id.")
    public IntOne2oneP getIntOne2oneP(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IntOne2oneP with id: {}", id);
        IntOne2oneP instance = intOne2onePService.findById(id);
        LOGGER.debug("IntOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the IntOne2oneP instance associated with the given id.")
    public IntOne2oneP editIntOne2oneP(@PathVariable(value = "id") Integer id, @RequestBody IntOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing IntOne2oneP with id: {}", instance.getIntId());
        instance.setIntId(id);
        instance = intOne2onePService.update(instance);
        LOGGER.debug("IntOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the IntOne2oneP instance associated with the given id.")
    public boolean deleteIntOne2oneP(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IntOne2oneP with id: {}", id);
        IntOne2oneP deleted = intOne2onePService.delete(id);
        return deleted != null;
    }
}
