/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.ByteMany2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ByteMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.ByteMany2oneC
 */
@RestController(value = "AllO2M_O2O.ByteMany2oneCController")
@RequestMapping("/AllO2M_O2O/ByteMany2oneC")
@Api(description = "Exposes APIs to work with ByteMany2oneC resource.", value = "ByteMany2oneCController")
public class ByteMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ByteMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ByteMany2oneCService")
    private ByteMany2oneCService byteMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ByteMany2oneC instances matching the search criteria.")
    public Page<ByteMany2oneC> findByteMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ByteMany2oneCs list");
        return byteMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ByteMany2oneC instances.")
    public Page<ByteMany2oneC> getByteMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering ByteMany2oneCs list");
        return byteMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setByteMany2oneCService(ByteMany2oneCService service) {
        this.byteMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ByteMany2oneC instance.")
    public ByteMany2oneC createByteMany2oneC(@RequestBody ByteMany2oneC instance) {
        LOGGER.debug("Create ByteMany2oneC with information: {}", instance);
        instance = byteMany2oneCService.create(instance);
        LOGGER.debug("Created ByteMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ByteMany2oneC instances.")
    public Long countAllByteMany2oneCs() {
        LOGGER.debug("counting ByteMany2oneCs");
        Long count = byteMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ByteMany2oneC instance associated with the given id.")
    public ByteMany2oneC getByteMany2oneC(@PathVariable(value = "id") Byte id) throws EntityNotFoundException {
        LOGGER.debug("Getting ByteMany2oneC with id: {}", id);
        ByteMany2oneC instance = byteMany2oneCService.findById(id);
        LOGGER.debug("ByteMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ByteMany2oneC instance associated with the given id.")
    public ByteMany2oneC editByteMany2oneC(@PathVariable(value = "id") Byte id, @RequestBody ByteMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ByteMany2oneC with id: {}", instance.getByteId());
        instance.setByteId(id);
        instance = byteMany2oneCService.update(instance);
        LOGGER.debug("ByteMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ByteMany2oneC instance associated with the given id.")
    public boolean deleteByteMany2oneC(@PathVariable(value = "id") Byte id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ByteMany2oneC with id: {}", id);
        ByteMany2oneC deleted = byteMany2oneCService.delete(id);
        return deleted != null;
    }
}
