/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.StringMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.StringMany2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class StringMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringMany2oneP
 */
@RestController(value = "AllO2M_O2O.StringMany2onePController")
@RequestMapping("/AllO2M_O2O/StringMany2oneP")
@Api(description = "Exposes APIs to work with StringMany2oneP resource.", value = "StringMany2onePController")
public class StringMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StringMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringMany2onePService")
    private StringMany2onePService stringMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.StringMany2oneCService")
    private StringMany2oneCService stringMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of StringMany2oneP instances matching the search criteria.")
    public Page<StringMany2oneP> findStringMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StringMany2onePs list");
        return stringMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of StringMany2oneP instances.")
    public Page<StringMany2oneP> getStringMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering StringMany2onePs list");
        return stringMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/stringMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the stringMany2oneCs instance associated with the given id.")
    public Page<StringMany2oneC> findAssociatedstringMany2oneCs(Pageable pageable, @PathVariable("id") String id) {
        LOGGER.debug("Fetching all associated stringMany2oneCs");
        return stringMany2oneCService.findAssociatedValues(id, "stringMany2oneP", "stringId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStringMany2onePService(StringMany2onePService service) {
        this.stringMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new StringMany2oneP instance.")
    public StringMany2oneP createStringMany2oneP(@RequestBody StringMany2oneP instance) {
        LOGGER.debug("Create StringMany2oneP with information: {}", instance);
        instance = stringMany2onePService.create(instance);
        LOGGER.debug("Created StringMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of StringMany2oneP instances.")
    public Long countAllStringMany2onePs() {
        LOGGER.debug("counting StringMany2onePs");
        Long count = stringMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the StringMany2oneP instance associated with the given id.")
    public StringMany2oneP getStringMany2oneP(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting StringMany2oneP with id: {}", id);
        StringMany2oneP instance = stringMany2onePService.findById(id);
        LOGGER.debug("StringMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the StringMany2oneP instance associated with the given id.")
    public StringMany2oneP editStringMany2oneP(@PathVariable(value = "id") String id, @RequestBody StringMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing StringMany2oneP with id: {}", instance.getStringId());
        instance.setStringId(id);
        instance = stringMany2onePService.update(instance);
        LOGGER.debug("StringMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the StringMany2oneP instance associated with the given id.")
    public boolean deleteStringMany2oneP(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StringMany2oneP with id: {}", id);
        StringMany2oneP deleted = stringMany2onePService.delete(id);
        return deleted != null;
    }
}
