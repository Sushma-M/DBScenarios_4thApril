/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.TimeMany2onePService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeMany2oneP
 */
@RestController(value = "AllO2M_O2O.TimeMany2onePController")
@RequestMapping("/AllO2M_O2O/TimeMany2oneP")
@Api(description = "Exposes APIs to work with TimeMany2oneP resource.", value = "TimeMany2onePController")
public class TimeMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeMany2onePService")
    private TimeMany2onePService timeMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.TimeMany2oneCService")
    private TimeMany2oneCService timeMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeMany2oneP instances matching the search criteria.")
    public Page<TimeMany2oneP> findTimeMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeMany2onePs list");
        return timeMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeMany2oneP instances.")
    public Page<TimeMany2oneP> getTimeMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering TimeMany2onePs list");
        return timeMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/timeMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the timeMany2oneCs instance associated with the given id.")
    public Page<TimeMany2oneC> findAssociatedtimeMany2oneCs(Pageable pageable, @PathVariable("id") Date id) {
        LOGGER.debug("Fetching all associated timeMany2oneCs");
        return timeMany2oneCService.findAssociatedValues(id, "timeMany2oneP", "timeId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeMany2onePService(TimeMany2onePService service) {
        this.timeMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeMany2oneP instance.")
    public TimeMany2oneP createTimeMany2oneP(@RequestBody TimeMany2oneP instance) {
        LOGGER.debug("Create TimeMany2oneP with information: {}", instance);
        instance = timeMany2onePService.create(instance);
        LOGGER.debug("Created TimeMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeMany2oneP instances.")
    public Long countAllTimeMany2onePs() {
        LOGGER.debug("counting TimeMany2onePs");
        Long count = timeMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeMany2oneP instance associated with the given id.")
    public TimeMany2oneP getTimeMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeMany2oneP with id: {}", id);
        TimeMany2oneP instance = timeMany2onePService.findById(id);
        LOGGER.debug("TimeMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeMany2oneP instance associated with the given id.")
    public TimeMany2oneP editTimeMany2oneP(@PathVariable(value = "id") Date id, @RequestBody TimeMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeMany2oneP with id: {}", instance.getTimeId());
        instance.setTimeId(id);
        instance = timeMany2onePService.update(instance);
        LOGGER.debug("TimeMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeMany2oneP instance associated with the given id.")
    public boolean deleteTimeMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeMany2oneP with id: {}", id);
        TimeMany2oneP deleted = timeMany2onePService.delete(id);
        return deleted != null;
    }
}
