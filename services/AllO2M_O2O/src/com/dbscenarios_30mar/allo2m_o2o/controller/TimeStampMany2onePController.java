/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeStampMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.TimeStampMany2onePService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeStampMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeStampMany2oneP
 */
@RestController(value = "AllO2M_O2O.TimeStampMany2onePController")
@RequestMapping("/AllO2M_O2O/TimeStampMany2oneP")
@Api(description = "Exposes APIs to work with TimeStampMany2oneP resource.", value = "TimeStampMany2onePController")
public class TimeStampMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeStampMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeStampMany2onePService")
    private TimeStampMany2onePService timeStampMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.TimeStampMany2oneCService")
    private TimeStampMany2oneCService timeStampMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeStampMany2oneP instances matching the search criteria.")
    public Page<TimeStampMany2oneP> findTimeStampMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeStampMany2onePs list");
        return timeStampMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeStampMany2oneP instances.")
    public Page<TimeStampMany2oneP> getTimeStampMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering TimeStampMany2onePs list");
        return timeStampMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/timeStampMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the timeStampMany2oneCs instance associated with the given id.")
    public Page<TimeStampMany2oneC> findAssociatedtimeStampMany2oneCs(Pageable pageable, @PathVariable("id") Date id) {
        LOGGER.debug("Fetching all associated timeStampMany2oneCs");
        return timeStampMany2oneCService.findAssociatedValues(id, "timeStampMany2oneP", "timeStampId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeStampMany2onePService(TimeStampMany2onePService service) {
        this.timeStampMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeStampMany2oneP instance.")
    public TimeStampMany2oneP createTimeStampMany2oneP(@RequestBody TimeStampMany2oneP instance) {
        LOGGER.debug("Create TimeStampMany2oneP with information: {}", instance);
        instance = timeStampMany2onePService.create(instance);
        LOGGER.debug("Created TimeStampMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeStampMany2oneP instances.")
    public Long countAllTimeStampMany2onePs() {
        LOGGER.debug("counting TimeStampMany2onePs");
        Long count = timeStampMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeStampMany2oneP instance associated with the given id.")
    public TimeStampMany2oneP getTimeStampMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeStampMany2oneP with id: {}", id);
        TimeStampMany2oneP instance = timeStampMany2onePService.findById(id);
        LOGGER.debug("TimeStampMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeStampMany2oneP instance associated with the given id.")
    public TimeStampMany2oneP editTimeStampMany2oneP(@PathVariable(value = "id") Date id, @RequestBody TimeStampMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeStampMany2oneP with id: {}", instance.getTimeStampId());
        instance.setTimeStampId(id);
        instance = timeStampMany2onePService.update(instance);
        LOGGER.debug("TimeStampMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeStampMany2oneP instance associated with the given id.")
    public boolean deleteTimeStampMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeStampMany2oneP with id: {}", id);
        TimeStampMany2oneP deleted = timeStampMany2onePService.delete(id);
        return deleted != null;
    }
}
