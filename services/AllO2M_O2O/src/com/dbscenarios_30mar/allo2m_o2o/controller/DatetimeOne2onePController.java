/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DatetimeOne2onePService;
import org.joda.time.LocalDateTime;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DatetimeOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeOne2oneP
 */
@RestController(value = "AllO2M_O2O.DatetimeOne2onePController")
@RequestMapping("/AllO2M_O2O/DatetimeOne2oneP")
@Api(description = "Exposes APIs to work with DatetimeOne2oneP resource.", value = "DatetimeOne2onePController")
public class DatetimeOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeOne2onePService")
    private DatetimeOne2onePService datetimeOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DatetimeOne2oneP instances matching the search criteria.")
    public Page<DatetimeOne2oneP> findDatetimeOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeOne2onePs list");
        return datetimeOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DatetimeOne2oneP instances.")
    public Page<DatetimeOne2oneP> getDatetimeOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DatetimeOne2onePs list");
        return datetimeOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDatetimeOne2onePService(DatetimeOne2onePService service) {
        this.datetimeOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DatetimeOne2oneP instance.")
    public DatetimeOne2oneP createDatetimeOne2oneP(@RequestBody DatetimeOne2oneP instance) {
        LOGGER.debug("Create DatetimeOne2oneP with information: {}", instance);
        instance = datetimeOne2onePService.create(instance);
        LOGGER.debug("Created DatetimeOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DatetimeOne2oneP instances.")
    public Long countAllDatetimeOne2onePs() {
        LOGGER.debug("counting DatetimeOne2onePs");
        Long count = datetimeOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DatetimeOne2oneP instance associated with the given id.")
    public DatetimeOne2oneP getDatetimeOne2oneP(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeOne2oneP with id: {}", id);
        DatetimeOne2oneP instance = datetimeOne2onePService.findById(id);
        LOGGER.debug("DatetimeOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DatetimeOne2oneP instance associated with the given id.")
    public DatetimeOne2oneP editDatetimeOne2oneP(@PathVariable(value = "id") LocalDateTime id, @RequestBody DatetimeOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeOne2oneP with id: {}", instance.getDatetimeId());
        instance.setDatetimeId(id);
        instance = datetimeOne2onePService.update(instance);
        LOGGER.debug("DatetimeOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DatetimeOne2oneP instance associated with the given id.")
    public boolean deleteDatetimeOne2oneP(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeOne2oneP with id: {}", id);
        DatetimeOne2oneP deleted = datetimeOne2onePService.delete(id);
        return deleted != null;
    }
}
