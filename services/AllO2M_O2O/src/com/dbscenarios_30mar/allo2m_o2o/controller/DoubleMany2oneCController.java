/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DoubleMany2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DoubleMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleMany2oneC
 */
@RestController(value = "AllO2M_O2O.DoubleMany2oneCController")
@RequestMapping("/AllO2M_O2O/DoubleMany2oneC")
@Api(description = "Exposes APIs to work with DoubleMany2oneC resource.", value = "DoubleMany2oneCController")
public class DoubleMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleMany2oneCService")
    private DoubleMany2oneCService doubleMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DoubleMany2oneC instances matching the search criteria.")
    public Page<DoubleMany2oneC> findDoubleMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DoubleMany2oneCs list");
        return doubleMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DoubleMany2oneC instances.")
    public Page<DoubleMany2oneC> getDoubleMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DoubleMany2oneCs list");
        return doubleMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDoubleMany2oneCService(DoubleMany2oneCService service) {
        this.doubleMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DoubleMany2oneC instance.")
    public DoubleMany2oneC createDoubleMany2oneC(@RequestBody DoubleMany2oneC instance) {
        LOGGER.debug("Create DoubleMany2oneC with information: {}", instance);
        instance = doubleMany2oneCService.create(instance);
        LOGGER.debug("Created DoubleMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DoubleMany2oneC instances.")
    public Long countAllDoubleMany2oneCs() {
        LOGGER.debug("counting DoubleMany2oneCs");
        Long count = doubleMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DoubleMany2oneC instance associated with the given id.")
    public DoubleMany2oneC getDoubleMany2oneC(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting DoubleMany2oneC with id: {}", id);
        DoubleMany2oneC instance = doubleMany2oneCService.findById(id);
        LOGGER.debug("DoubleMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DoubleMany2oneC instance associated with the given id.")
    public DoubleMany2oneC editDoubleMany2oneC(@PathVariable(value = "id") Double id, @RequestBody DoubleMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DoubleMany2oneC with id: {}", instance.getDoubleId());
        instance.setDoubleId(id);
        instance = doubleMany2oneCService.update(instance);
        LOGGER.debug("DoubleMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DoubleMany2oneC instance associated with the given id.")
    public boolean deleteDoubleMany2oneC(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DoubleMany2oneC with id: {}", id);
        DoubleMany2oneC deleted = doubleMany2oneCService.delete(id);
        return deleted != null;
    }
}
