/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.LongOne2oneCService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class LongOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.LongOne2oneC
 */
@RestController(value = "AllO2M_O2O.LongOne2oneCController")
@RequestMapping("/AllO2M_O2O/LongOne2oneC")
@Api(description = "Exposes APIs to work with LongOne2oneC resource.", value = "LongOne2oneCController")
public class LongOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LongOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.LongOne2oneCService")
    private LongOne2oneCService longOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of LongOne2oneC instances matching the search criteria.")
    public Page<LongOne2oneC> findLongOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LongOne2oneCs list");
        return longOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of LongOne2oneC instances.")
    public Page<LongOne2oneC> getLongOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering LongOne2oneCs list");
        return longOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setLongOne2oneCService(LongOne2oneCService service) {
        this.longOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new LongOne2oneC instance.")
    public LongOne2oneC createLongOne2oneC(@RequestBody LongOne2oneC instance) {
        LOGGER.debug("Create LongOne2oneC with information: {}", instance);
        instance = longOne2oneCService.create(instance);
        LOGGER.debug("Created LongOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of LongOne2oneC instances.")
    public Long countAllLongOne2oneCs() {
        LOGGER.debug("counting LongOne2oneCs");
        Long count = longOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the LongOne2oneC instance associated with the given id.")
    public LongOne2oneC getLongOne2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting LongOne2oneC with id: {}", id);
        LongOne2oneC instance = longOne2oneCService.findById(id);
        LOGGER.debug("LongOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the LongOne2oneC instance associated with the given id.")
    public LongOne2oneC editLongOne2oneC(@PathVariable(value = "id") BigInteger id, @RequestBody LongOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing LongOne2oneC with id: {}", instance.getLongId());
        instance.setLongId(id);
        instance = longOne2oneCService.update(instance);
        LOGGER.debug("LongOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the LongOne2oneC instance associated with the given id.")
    public boolean deleteLongOne2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LongOne2oneC with id: {}", id);
        LongOne2oneC deleted = longOne2oneCService.delete(id);
        return deleted != null;
    }
}
