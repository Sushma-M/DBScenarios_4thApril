/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeMany2oneCService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeMany2oneC
 */
@RestController(value = "AllO2M_O2O.TimeMany2oneCController")
@RequestMapping("/AllO2M_O2O/TimeMany2oneC")
@Api(description = "Exposes APIs to work with TimeMany2oneC resource.", value = "TimeMany2oneCController")
public class TimeMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeMany2oneCService")
    private TimeMany2oneCService timeMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeMany2oneC instances matching the search criteria.")
    public Page<TimeMany2oneC> findTimeMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeMany2oneCs list");
        return timeMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeMany2oneC instances.")
    public Page<TimeMany2oneC> getTimeMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering TimeMany2oneCs list");
        return timeMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeMany2oneCService(TimeMany2oneCService service) {
        this.timeMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeMany2oneC instance.")
    public TimeMany2oneC createTimeMany2oneC(@RequestBody TimeMany2oneC instance) {
        LOGGER.debug("Create TimeMany2oneC with information: {}", instance);
        instance = timeMany2oneCService.create(instance);
        LOGGER.debug("Created TimeMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeMany2oneC instances.")
    public Long countAllTimeMany2oneCs() {
        LOGGER.debug("counting TimeMany2oneCs");
        Long count = timeMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeMany2oneC instance associated with the given id.")
    public TimeMany2oneC getTimeMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeMany2oneC with id: {}", id);
        TimeMany2oneC instance = timeMany2oneCService.findById(id);
        LOGGER.debug("TimeMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeMany2oneC instance associated with the given id.")
    public TimeMany2oneC editTimeMany2oneC(@PathVariable(value = "id") Date id, @RequestBody TimeMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeMany2oneC with id: {}", instance.getTimeId());
        instance.setTimeId(id);
        instance = timeMany2oneCService.update(instance);
        LOGGER.debug("TimeMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeMany2oneC instance associated with the given id.")
    public boolean deleteTimeMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeMany2oneC with id: {}", id);
        TimeMany2oneC deleted = timeMany2oneCService.delete(id);
        return deleted != null;
    }
}
