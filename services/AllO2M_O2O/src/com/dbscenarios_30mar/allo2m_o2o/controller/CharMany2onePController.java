/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.CharMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.CharMany2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CharMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.CharMany2oneP
 */
@RestController(value = "AllO2M_O2O.CharMany2onePController")
@RequestMapping("/AllO2M_O2O/CharMany2oneP")
@Api(description = "Exposes APIs to work with CharMany2oneP resource.", value = "CharMany2onePController")
public class CharMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CharMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.CharMany2onePService")
    private CharMany2onePService charMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.CharMany2oneCService")
    private CharMany2oneCService charMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CharMany2oneP instances matching the search criteria.")
    public Page<CharMany2oneP> findCharMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CharMany2onePs list");
        return charMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CharMany2oneP instances.")
    public Page<CharMany2oneP> getCharMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering CharMany2onePs list");
        return charMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/charMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the charMany2oneCs instance associated with the given id.")
    public Page<CharMany2oneC> findAssociatedcharMany2oneCs(Pageable pageable, @PathVariable("id") Character id) {
        LOGGER.debug("Fetching all associated charMany2oneCs");
        return charMany2oneCService.findAssociatedValues(id, "charMany2oneP", "charId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCharMany2onePService(CharMany2onePService service) {
        this.charMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CharMany2oneP instance.")
    public CharMany2oneP createCharMany2oneP(@RequestBody CharMany2oneP instance) {
        LOGGER.debug("Create CharMany2oneP with information: {}", instance);
        instance = charMany2onePService.create(instance);
        LOGGER.debug("Created CharMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CharMany2oneP instances.")
    public Long countAllCharMany2onePs() {
        LOGGER.debug("counting CharMany2onePs");
        Long count = charMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CharMany2oneP instance associated with the given id.")
    public CharMany2oneP getCharMany2oneP(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Getting CharMany2oneP with id: {}", id);
        CharMany2oneP instance = charMany2onePService.findById(id);
        LOGGER.debug("CharMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CharMany2oneP instance associated with the given id.")
    public CharMany2oneP editCharMany2oneP(@PathVariable(value = "id") Character id, @RequestBody CharMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CharMany2oneP with id: {}", instance.getCharId());
        instance.setCharId(id);
        instance = charMany2onePService.update(instance);
        LOGGER.debug("CharMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CharMany2oneP instance associated with the given id.")
    public boolean deleteCharMany2oneP(@PathVariable(value = "id") Character id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CharMany2oneP with id: {}", id);
        CharMany2oneP deleted = charMany2onePService.delete(id);
        return deleted != null;
    }
}
