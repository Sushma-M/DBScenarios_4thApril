/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.StringOne2onePService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class StringOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringOne2oneP
 */
@RestController(value = "AllO2M_O2O.StringOne2onePController")
@RequestMapping("/AllO2M_O2O/StringOne2oneP")
@Api(description = "Exposes APIs to work with StringOne2oneP resource.", value = "StringOne2onePController")
public class StringOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StringOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringOne2onePService")
    private StringOne2onePService stringOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of StringOne2oneP instances matching the search criteria.")
    public Page<StringOne2oneP> findStringOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StringOne2onePs list");
        return stringOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of StringOne2oneP instances.")
    public Page<StringOne2oneP> getStringOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering StringOne2onePs list");
        return stringOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStringOne2onePService(StringOne2onePService service) {
        this.stringOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new StringOne2oneP instance.")
    public StringOne2oneP createStringOne2oneP(@RequestBody StringOne2oneP instance) {
        LOGGER.debug("Create StringOne2oneP with information: {}", instance);
        instance = stringOne2onePService.create(instance);
        LOGGER.debug("Created StringOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of StringOne2oneP instances.")
    public Long countAllStringOne2onePs() {
        LOGGER.debug("counting StringOne2onePs");
        Long count = stringOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the StringOne2oneP instance associated with the given id.")
    public StringOne2oneP getStringOne2oneP(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting StringOne2oneP with id: {}", id);
        StringOne2oneP instance = stringOne2onePService.findById(id);
        LOGGER.debug("StringOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the StringOne2oneP instance associated with the given id.")
    public StringOne2oneP editStringOne2oneP(@PathVariable(value = "id") String id, @RequestBody StringOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing StringOne2oneP with id: {}", instance.getStringId());
        instance.setStringId(id);
        instance = stringOne2onePService.update(instance);
        LOGGER.debug("StringOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the StringOne2oneP instance associated with the given id.")
    public boolean deleteStringOne2oneP(@PathVariable(value = "id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StringOne2oneP with id: {}", id);
        StringOne2oneP deleted = stringOne2onePService.delete(id);
        return deleted != null;
    }
}
