/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.BigdecMany2oneCService;
import java.math.BigDecimal;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BigdecMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecMany2oneC
 */
@RestController(value = "AllO2M_O2O.BigdecMany2oneCController")
@RequestMapping("/AllO2M_O2O/BigdecMany2oneC")
@Api(description = "Exposes APIs to work with BigdecMany2oneC resource.", value = "BigdecMany2oneCController")
public class BigdecMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecMany2oneCService")
    private BigdecMany2oneCService bigdecMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BigdecMany2oneC instances matching the search criteria.")
    public Page<BigdecMany2oneC> findBigdecMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigdecMany2oneCs list");
        return bigdecMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BigdecMany2oneC instances.")
    public Page<BigdecMany2oneC> getBigdecMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering BigdecMany2oneCs list");
        return bigdecMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBigdecMany2oneCService(BigdecMany2oneCService service) {
        this.bigdecMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BigdecMany2oneC instance.")
    public BigdecMany2oneC createBigdecMany2oneC(@RequestBody BigdecMany2oneC instance) {
        LOGGER.debug("Create BigdecMany2oneC with information: {}", instance);
        instance = bigdecMany2oneCService.create(instance);
        LOGGER.debug("Created BigdecMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BigdecMany2oneC instances.")
    public Long countAllBigdecMany2oneCs() {
        LOGGER.debug("counting BigdecMany2oneCs");
        Long count = bigdecMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BigdecMany2oneC instance associated with the given id.")
    public BigdecMany2oneC getBigdecMany2oneC(@PathVariable(value = "id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigdecMany2oneC with id: {}", id);
        BigdecMany2oneC instance = bigdecMany2oneCService.findById(id);
        LOGGER.debug("BigdecMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BigdecMany2oneC instance associated with the given id.")
    public BigdecMany2oneC editBigdecMany2oneC(@PathVariable(value = "id") BigDecimal id, @RequestBody BigdecMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigdecMany2oneC with id: {}", instance.getBigdecId());
        instance.setBigdecId(id);
        instance = bigdecMany2oneCService.update(instance);
        LOGGER.debug("BigdecMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BigdecMany2oneC instance associated with the given id.")
    public boolean deleteBigdecMany2oneC(@PathVariable(value = "id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigdecMany2oneC with id: {}", id);
        BigdecMany2oneC deleted = bigdecMany2oneCService.delete(id);
        return deleted != null;
    }
}
