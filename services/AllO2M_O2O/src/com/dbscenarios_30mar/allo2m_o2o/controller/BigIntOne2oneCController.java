/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.BigIntOne2oneCService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BigIntOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigIntOne2oneC
 */
@RestController(value = "AllO2M_O2O.BigIntOne2oneCController")
@RequestMapping("/AllO2M_O2O/BigIntOne2oneC")
@Api(description = "Exposes APIs to work with BigIntOne2oneC resource.", value = "BigIntOne2oneCController")
public class BigIntOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntOne2oneCService")
    private BigIntOne2oneCService bigIntOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BigIntOne2oneC instances matching the search criteria.")
    public Page<BigIntOne2oneC> findBigIntOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigIntOne2oneCs list");
        return bigIntOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BigIntOne2oneC instances.")
    public Page<BigIntOne2oneC> getBigIntOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering BigIntOne2oneCs list");
        return bigIntOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBigIntOne2oneCService(BigIntOne2oneCService service) {
        this.bigIntOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BigIntOne2oneC instance.")
    public BigIntOne2oneC createBigIntOne2oneC(@RequestBody BigIntOne2oneC instance) {
        LOGGER.debug("Create BigIntOne2oneC with information: {}", instance);
        instance = bigIntOne2oneCService.create(instance);
        LOGGER.debug("Created BigIntOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BigIntOne2oneC instances.")
    public Long countAllBigIntOne2oneCs() {
        LOGGER.debug("counting BigIntOne2oneCs");
        Long count = bigIntOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BigIntOne2oneC instance associated with the given id.")
    public BigIntOne2oneC getBigIntOne2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigIntOne2oneC with id: {}", id);
        BigIntOne2oneC instance = bigIntOne2oneCService.findById(id);
        LOGGER.debug("BigIntOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BigIntOne2oneC instance associated with the given id.")
    public BigIntOne2oneC editBigIntOne2oneC(@PathVariable(value = "id") BigInteger id, @RequestBody BigIntOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigIntOne2oneC with id: {}", instance.getBigIntId());
        instance.setBigIntId(id);
        instance = bigIntOne2oneCService.update(instance);
        LOGGER.debug("BigIntOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BigIntOne2oneC instance associated with the given id.")
    public boolean deleteBigIntOne2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigIntOne2oneC with id: {}", id);
        BigIntOne2oneC deleted = bigIntOne2oneCService.delete(id);
        return deleted != null;
    }
}
