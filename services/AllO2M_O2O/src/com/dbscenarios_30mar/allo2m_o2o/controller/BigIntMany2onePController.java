/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.BigIntMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.BigIntMany2onePService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BigIntMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigIntMany2oneP
 */
@RestController(value = "AllO2M_O2O.BigIntMany2onePController")
@RequestMapping("/AllO2M_O2O/BigIntMany2oneP")
@Api(description = "Exposes APIs to work with BigIntMany2oneP resource.", value = "BigIntMany2onePController")
public class BigIntMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntMany2onePService")
    private BigIntMany2onePService bigIntMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntMany2oneCService")
    private BigIntMany2oneCService bigIntMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BigIntMany2oneP instances matching the search criteria.")
    public Page<BigIntMany2oneP> findBigIntMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigIntMany2onePs list");
        return bigIntMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BigIntMany2oneP instances.")
    public Page<BigIntMany2oneP> getBigIntMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering BigIntMany2onePs list");
        return bigIntMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/bigIntMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the bigIntMany2oneCs instance associated with the given id.")
    public Page<BigIntMany2oneC> findAssociatedbigIntMany2oneCs(Pageable pageable, @PathVariable("id") BigInteger id) {
        LOGGER.debug("Fetching all associated bigIntMany2oneCs");
        return bigIntMany2oneCService.findAssociatedValues(id, "bigIntMany2oneP", "bigIntId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBigIntMany2onePService(BigIntMany2onePService service) {
        this.bigIntMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BigIntMany2oneP instance.")
    public BigIntMany2oneP createBigIntMany2oneP(@RequestBody BigIntMany2oneP instance) {
        LOGGER.debug("Create BigIntMany2oneP with information: {}", instance);
        instance = bigIntMany2onePService.create(instance);
        LOGGER.debug("Created BigIntMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BigIntMany2oneP instances.")
    public Long countAllBigIntMany2onePs() {
        LOGGER.debug("counting BigIntMany2onePs");
        Long count = bigIntMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BigIntMany2oneP instance associated with the given id.")
    public BigIntMany2oneP getBigIntMany2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigIntMany2oneP with id: {}", id);
        BigIntMany2oneP instance = bigIntMany2onePService.findById(id);
        LOGGER.debug("BigIntMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BigIntMany2oneP instance associated with the given id.")
    public BigIntMany2oneP editBigIntMany2oneP(@PathVariable(value = "id") BigInteger id, @RequestBody BigIntMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigIntMany2oneP with id: {}", instance.getBigIntId());
        instance.setBigIntId(id);
        instance = bigIntMany2onePService.update(instance);
        LOGGER.debug("BigIntMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BigIntMany2oneP instance associated with the given id.")
    public boolean deleteBigIntMany2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigIntMany2oneP with id: {}", id);
        BigIntMany2oneP deleted = bigIntMany2onePService.delete(id);
        return deleted != null;
    }
}
