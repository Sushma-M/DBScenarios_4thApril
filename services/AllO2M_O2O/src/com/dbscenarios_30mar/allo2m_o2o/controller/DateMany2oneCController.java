/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DateMany2oneCService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DateMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateMany2oneC
 */
@RestController(value = "AllO2M_O2O.DateMany2oneCController")
@RequestMapping("/AllO2M_O2O/DateMany2oneC")
@Api(description = "Exposes APIs to work with DateMany2oneC resource.", value = "DateMany2oneCController")
public class DateMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DateMany2oneCService")
    private DateMany2oneCService dateMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DateMany2oneC instances matching the search criteria.")
    public Page<DateMany2oneC> findDateMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateMany2oneCs list");
        return dateMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DateMany2oneC instances.")
    public Page<DateMany2oneC> getDateMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DateMany2oneCs list");
        return dateMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDateMany2oneCService(DateMany2oneCService service) {
        this.dateMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DateMany2oneC instance.")
    public DateMany2oneC createDateMany2oneC(@RequestBody DateMany2oneC instance) {
        LOGGER.debug("Create DateMany2oneC with information: {}", instance);
        instance = dateMany2oneCService.create(instance);
        LOGGER.debug("Created DateMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DateMany2oneC instances.")
    public Long countAllDateMany2oneCs() {
        LOGGER.debug("counting DateMany2oneCs");
        Long count = dateMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DateMany2oneC instance associated with the given id.")
    public DateMany2oneC getDateMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting DateMany2oneC with id: {}", id);
        DateMany2oneC instance = dateMany2oneCService.findById(id);
        LOGGER.debug("DateMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DateMany2oneC instance associated with the given id.")
    public DateMany2oneC editDateMany2oneC(@PathVariable(value = "id") Date id, @RequestBody DateMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DateMany2oneC with id: {}", instance.getDateId());
        instance.setDateId(id);
        instance = dateMany2oneCService.update(instance);
        LOGGER.debug("DateMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DateMany2oneC instance associated with the given id.")
    public boolean deleteDateMany2oneC(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateMany2oneC with id: {}", id);
        DateMany2oneC deleted = dateMany2oneCService.delete(id);
        return deleted != null;
    }
}
