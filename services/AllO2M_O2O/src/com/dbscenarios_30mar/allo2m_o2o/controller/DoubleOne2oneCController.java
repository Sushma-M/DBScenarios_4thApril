/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DoubleOne2oneCService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DoubleOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleOne2oneC
 */
@RestController(value = "AllO2M_O2O.DoubleOne2oneCController")
@RequestMapping("/AllO2M_O2O/DoubleOne2oneC")
@Api(description = "Exposes APIs to work with DoubleOne2oneC resource.", value = "DoubleOne2oneCController")
public class DoubleOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleOne2oneCService")
    private DoubleOne2oneCService doubleOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DoubleOne2oneC instances matching the search criteria.")
    public Page<DoubleOne2oneC> findDoubleOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DoubleOne2oneCs list");
        return doubleOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DoubleOne2oneC instances.")
    public Page<DoubleOne2oneC> getDoubleOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DoubleOne2oneCs list");
        return doubleOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDoubleOne2oneCService(DoubleOne2oneCService service) {
        this.doubleOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DoubleOne2oneC instance.")
    public DoubleOne2oneC createDoubleOne2oneC(@RequestBody DoubleOne2oneC instance) {
        LOGGER.debug("Create DoubleOne2oneC with information: {}", instance);
        instance = doubleOne2oneCService.create(instance);
        LOGGER.debug("Created DoubleOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DoubleOne2oneC instances.")
    public Long countAllDoubleOne2oneCs() {
        LOGGER.debug("counting DoubleOne2oneCs");
        Long count = doubleOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DoubleOne2oneC instance associated with the given id.")
    public DoubleOne2oneC getDoubleOne2oneC(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Getting DoubleOne2oneC with id: {}", id);
        DoubleOne2oneC instance = doubleOne2oneCService.findById(id);
        LOGGER.debug("DoubleOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DoubleOne2oneC instance associated with the given id.")
    public DoubleOne2oneC editDoubleOne2oneC(@PathVariable(value = "id") Double id, @RequestBody DoubleOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DoubleOne2oneC with id: {}", instance.getDoubleId());
        instance.setDoubleId(id);
        instance = doubleOne2oneCService.update(instance);
        LOGGER.debug("DoubleOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DoubleOne2oneC instance associated with the given id.")
    public boolean deleteDoubleOne2oneC(@PathVariable(value = "id") Double id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DoubleOne2oneC with id: {}", id);
        DoubleOne2oneC deleted = doubleOne2oneCService.delete(id);
        return deleted != null;
    }
}
