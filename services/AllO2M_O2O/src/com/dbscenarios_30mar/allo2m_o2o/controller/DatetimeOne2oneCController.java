/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DatetimeOne2oneCService;
import org.joda.time.LocalDateTime;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DatetimeOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeOne2oneC
 */
@RestController(value = "AllO2M_O2O.DatetimeOne2oneCController")
@RequestMapping("/AllO2M_O2O/DatetimeOne2oneC")
@Api(description = "Exposes APIs to work with DatetimeOne2oneC resource.", value = "DatetimeOne2oneCController")
public class DatetimeOne2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeOne2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeOne2oneCService")
    private DatetimeOne2oneCService datetimeOne2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DatetimeOne2oneC instances matching the search criteria.")
    public Page<DatetimeOne2oneC> findDatetimeOne2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeOne2oneCs list");
        return datetimeOne2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DatetimeOne2oneC instances.")
    public Page<DatetimeOne2oneC> getDatetimeOne2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering DatetimeOne2oneCs list");
        return datetimeOne2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDatetimeOne2oneCService(DatetimeOne2oneCService service) {
        this.datetimeOne2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DatetimeOne2oneC instance.")
    public DatetimeOne2oneC createDatetimeOne2oneC(@RequestBody DatetimeOne2oneC instance) {
        LOGGER.debug("Create DatetimeOne2oneC with information: {}", instance);
        instance = datetimeOne2oneCService.create(instance);
        LOGGER.debug("Created DatetimeOne2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DatetimeOne2oneC instances.")
    public Long countAllDatetimeOne2oneCs() {
        LOGGER.debug("counting DatetimeOne2oneCs");
        Long count = datetimeOne2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DatetimeOne2oneC instance associated with the given id.")
    public DatetimeOne2oneC getDatetimeOne2oneC(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeOne2oneC with id: {}", id);
        DatetimeOne2oneC instance = datetimeOne2oneCService.findById(id);
        LOGGER.debug("DatetimeOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DatetimeOne2oneC instance associated with the given id.")
    public DatetimeOne2oneC editDatetimeOne2oneC(@PathVariable(value = "id") LocalDateTime id, @RequestBody DatetimeOne2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeOne2oneC with id: {}", instance.getDatetimeId());
        instance.setDatetimeId(id);
        instance = datetimeOne2oneCService.update(instance);
        LOGGER.debug("DatetimeOne2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DatetimeOne2oneC instance associated with the given id.")
    public boolean deleteDatetimeOne2oneC(@PathVariable(value = "id") LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeOne2oneC with id: {}", id);
        DatetimeOne2oneC deleted = datetimeOne2oneCService.delete(id);
        return deleted != null;
    }
}
