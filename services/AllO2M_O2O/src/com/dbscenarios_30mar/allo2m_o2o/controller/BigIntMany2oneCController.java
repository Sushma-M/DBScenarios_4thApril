/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.BigIntMany2oneCService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class BigIntMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigIntMany2oneC
 */
@RestController(value = "AllO2M_O2O.BigIntMany2oneCController")
@RequestMapping("/AllO2M_O2O/BigIntMany2oneC")
@Api(description = "Exposes APIs to work with BigIntMany2oneC resource.", value = "BigIntMany2oneCController")
public class BigIntMany2oneCController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntMany2oneCController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntMany2oneCService")
    private BigIntMany2oneCService bigIntMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of BigIntMany2oneC instances matching the search criteria.")
    public Page<BigIntMany2oneC> findBigIntMany2oneCs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigIntMany2oneCs list");
        return bigIntMany2oneCService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of BigIntMany2oneC instances.")
    public Page<BigIntMany2oneC> getBigIntMany2oneCs(Pageable pageable) {
        LOGGER.debug("Rendering BigIntMany2oneCs list");
        return bigIntMany2oneCService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setBigIntMany2oneCService(BigIntMany2oneCService service) {
        this.bigIntMany2oneCService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new BigIntMany2oneC instance.")
    public BigIntMany2oneC createBigIntMany2oneC(@RequestBody BigIntMany2oneC instance) {
        LOGGER.debug("Create BigIntMany2oneC with information: {}", instance);
        instance = bigIntMany2oneCService.create(instance);
        LOGGER.debug("Created BigIntMany2oneC with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of BigIntMany2oneC instances.")
    public Long countAllBigIntMany2oneCs() {
        LOGGER.debug("counting BigIntMany2oneCs");
        Long count = bigIntMany2oneCService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the BigIntMany2oneC instance associated with the given id.")
    public BigIntMany2oneC getBigIntMany2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigIntMany2oneC with id: {}", id);
        BigIntMany2oneC instance = bigIntMany2oneCService.findById(id);
        LOGGER.debug("BigIntMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the BigIntMany2oneC instance associated with the given id.")
    public BigIntMany2oneC editBigIntMany2oneC(@PathVariable(value = "id") BigInteger id, @RequestBody BigIntMany2oneC instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BigIntMany2oneC with id: {}", instance.getBigIntId());
        instance.setBigIntId(id);
        instance = bigIntMany2oneCService.update(instance);
        LOGGER.debug("BigIntMany2oneC details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the BigIntMany2oneC instance associated with the given id.")
    public boolean deleteBigIntMany2oneC(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigIntMany2oneC with id: {}", id);
        BigIntMany2oneC deleted = bigIntMany2oneCService.delete(id);
        return deleted != null;
    }
}
