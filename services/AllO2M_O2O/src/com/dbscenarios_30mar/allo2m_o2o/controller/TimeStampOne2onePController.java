/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.TimeStampOne2onePService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TimeStampOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeStampOne2oneP
 */
@RestController(value = "AllO2M_O2O.TimeStampOne2onePController")
@RequestMapping("/AllO2M_O2O/TimeStampOne2oneP")
@Api(description = "Exposes APIs to work with TimeStampOne2oneP resource.", value = "TimeStampOne2onePController")
public class TimeStampOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeStampOne2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeStampOne2onePService")
    private TimeStampOne2onePService timeStampOne2onePService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TimeStampOne2oneP instances matching the search criteria.")
    public Page<TimeStampOne2oneP> findTimeStampOne2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TimeStampOne2onePs list");
        return timeStampOne2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TimeStampOne2oneP instances.")
    public Page<TimeStampOne2oneP> getTimeStampOne2onePs(Pageable pageable) {
        LOGGER.debug("Rendering TimeStampOne2onePs list");
        return timeStampOne2onePService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTimeStampOne2onePService(TimeStampOne2onePService service) {
        this.timeStampOne2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TimeStampOne2oneP instance.")
    public TimeStampOne2oneP createTimeStampOne2oneP(@RequestBody TimeStampOne2oneP instance) {
        LOGGER.debug("Create TimeStampOne2oneP with information: {}", instance);
        instance = timeStampOne2onePService.create(instance);
        LOGGER.debug("Created TimeStampOne2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TimeStampOne2oneP instances.")
    public Long countAllTimeStampOne2onePs() {
        LOGGER.debug("counting TimeStampOne2onePs");
        Long count = timeStampOne2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TimeStampOne2oneP instance associated with the given id.")
    public TimeStampOne2oneP getTimeStampOne2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeStampOne2oneP with id: {}", id);
        TimeStampOne2oneP instance = timeStampOne2onePService.findById(id);
        LOGGER.debug("TimeStampOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TimeStampOne2oneP instance associated with the given id.")
    public TimeStampOne2oneP editTimeStampOne2oneP(@PathVariable(value = "id") Date id, @RequestBody TimeStampOne2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeStampOne2oneP with id: {}", instance.getTimeStamp());
        instance.setTimeStamp(id);
        instance = timeStampOne2onePService.update(instance);
        LOGGER.debug("TimeStampOne2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TimeStampOne2oneP instance associated with the given id.")
    public boolean deleteTimeStampOne2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeStampOne2oneP with id: {}", id);
        TimeStampOne2oneP deleted = timeStampOne2onePService.delete(id);
        return deleted != null;
    }
}
