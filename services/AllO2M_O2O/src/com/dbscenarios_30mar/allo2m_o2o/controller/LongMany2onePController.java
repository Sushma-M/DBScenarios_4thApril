/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.LongMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.LongMany2onePService;
import java.math.BigInteger;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class LongMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.LongMany2oneP
 */
@RestController(value = "AllO2M_O2O.LongMany2onePController")
@RequestMapping("/AllO2M_O2O/LongMany2oneP")
@Api(description = "Exposes APIs to work with LongMany2oneP resource.", value = "LongMany2onePController")
public class LongMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LongMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.LongMany2onePService")
    private LongMany2onePService longMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.LongMany2oneCService")
    private LongMany2oneCService longMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of LongMany2oneP instances matching the search criteria.")
    public Page<LongMany2oneP> findLongMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LongMany2onePs list");
        return longMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of LongMany2oneP instances.")
    public Page<LongMany2oneP> getLongMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering LongMany2onePs list");
        return longMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/longMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the longMany2oneCs instance associated with the given id.")
    public Page<LongMany2oneC> findAssociatedlongMany2oneCs(Pageable pageable, @PathVariable("id") BigInteger id) {
        LOGGER.debug("Fetching all associated longMany2oneCs");
        return longMany2oneCService.findAssociatedValues(id, "longMany2oneP", "longId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setLongMany2onePService(LongMany2onePService service) {
        this.longMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new LongMany2oneP instance.")
    public LongMany2oneP createLongMany2oneP(@RequestBody LongMany2oneP instance) {
        LOGGER.debug("Create LongMany2oneP with information: {}", instance);
        instance = longMany2onePService.create(instance);
        LOGGER.debug("Created LongMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of LongMany2oneP instances.")
    public Long countAllLongMany2onePs() {
        LOGGER.debug("counting LongMany2onePs");
        Long count = longMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the LongMany2oneP instance associated with the given id.")
    public LongMany2oneP getLongMany2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting LongMany2oneP with id: {}", id);
        LongMany2oneP instance = longMany2onePService.findById(id);
        LOGGER.debug("LongMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the LongMany2oneP instance associated with the given id.")
    public LongMany2oneP editLongMany2oneP(@PathVariable(value = "id") BigInteger id, @RequestBody LongMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing LongMany2oneP with id: {}", instance.getLongId());
        instance.setLongId(id);
        instance = longMany2onePService.update(instance);
        LOGGER.debug("LongMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the LongMany2oneP instance associated with the given id.")
    public boolean deleteLongMany2oneP(@PathVariable(value = "id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LongMany2oneP with id: {}", id);
        LongMany2oneP deleted = longMany2onePService.delete(id);
        return deleted != null;
    }
}
