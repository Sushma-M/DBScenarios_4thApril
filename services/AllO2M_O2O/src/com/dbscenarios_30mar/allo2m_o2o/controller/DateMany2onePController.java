/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.dbscenarios_30mar.allo2m_o2o.service.DateMany2oneCService;
import com.dbscenarios_30mar.allo2m_o2o.service.DateMany2onePService;
import java.util.Date;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.dbscenarios_30mar.allo2m_o2o.*;
import com.dbscenarios_30mar.allo2m_o2o.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class DateMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateMany2oneP
 */
@RestController(value = "AllO2M_O2O.DateMany2onePController")
@RequestMapping("/AllO2M_O2O/DateMany2oneP")
@Api(description = "Exposes APIs to work with DateMany2oneP resource.", value = "DateMany2onePController")
public class DateMany2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DateMany2onePController.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DateMany2onePService")
    private DateMany2onePService dateMany2onePService;

    @Autowired
    @Qualifier("AllO2M_O2O.DateMany2oneCService")
    private DateMany2oneCService dateMany2oneCService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of DateMany2oneP instances matching the search criteria.")
    public Page<DateMany2oneP> findDateMany2onePs(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DateMany2onePs list");
        return dateMany2onePService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of DateMany2oneP instances.")
    public Page<DateMany2oneP> getDateMany2onePs(Pageable pageable) {
        LOGGER.debug("Rendering DateMany2onePs list");
        return dateMany2onePService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/dateMany2oneCs", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the dateMany2oneCs instance associated with the given id.")
    public Page<DateMany2oneC> findAssociateddateMany2oneCs(Pageable pageable, @PathVariable("id") Date id) {
        LOGGER.debug("Fetching all associated dateMany2oneCs");
        return dateMany2oneCService.findAssociatedValues(id, "dateMany2oneP", "dateId", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setDateMany2onePService(DateMany2onePService service) {
        this.dateMany2onePService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new DateMany2oneP instance.")
    public DateMany2oneP createDateMany2oneP(@RequestBody DateMany2oneP instance) {
        LOGGER.debug("Create DateMany2oneP with information: {}", instance);
        instance = dateMany2onePService.create(instance);
        LOGGER.debug("Created DateMany2oneP with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of DateMany2oneP instances.")
    public Long countAllDateMany2onePs() {
        LOGGER.debug("counting DateMany2onePs");
        Long count = dateMany2onePService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the DateMany2oneP instance associated with the given id.")
    public DateMany2oneP getDateMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Getting DateMany2oneP with id: {}", id);
        DateMany2oneP instance = dateMany2onePService.findById(id);
        LOGGER.debug("DateMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the DateMany2oneP instance associated with the given id.")
    public DateMany2oneP editDateMany2oneP(@PathVariable(value = "id") Date id, @RequestBody DateMany2oneP instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DateMany2oneP with id: {}", instance.getDateId());
        instance.setDateId(id);
        instance = dateMany2onePService.update(instance);
        LOGGER.debug("DateMany2oneP details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the DateMany2oneP instance associated with the given id.")
    public boolean deleteDateMany2oneP(@PathVariable(value = "id") Date id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DateMany2oneP with id: {}", id);
        DateMany2oneP deleted = dateMany2onePService.delete(id);
        return deleted != null;
    }
}
