/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigdecMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecMany2oneC
 */
@Service("AllO2M_O2O.BigdecMany2oneCService")
public class BigdecMany2oneCServiceImpl implements BigdecMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecMany2oneCDao")
    private WMGenericDao<BigdecMany2oneC, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigdecMany2oneC, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigdecMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneC create(BigdecMany2oneC bigdecmany2onec) {
        LOGGER.debug("Creating a new bigdecmany2onec with information: {}" , bigdecmany2onec);
        return this.wmGenericDao.create(bigdecmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneC delete(BigDecimal bigdecmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigdecmany2onec with id: {}" , bigdecmany2onecId);
        BigdecMany2oneC deleted = this.wmGenericDao.findById(bigdecmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No bigdecmany2onec found with id: {}" , bigdecmany2onecId);
            throw new EntityNotFoundException(String.valueOf(bigdecmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigdecmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigdecmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneC findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigdecmany2onec by id: {}" , id);
        BigdecMany2oneC bigdecmany2onec=this.wmGenericDao.findById(id);
        if(bigdecmany2onec==null){
            LOGGER.debug("No bigdecmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigdecmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneC update(BigdecMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigdecmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getBigdecId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


