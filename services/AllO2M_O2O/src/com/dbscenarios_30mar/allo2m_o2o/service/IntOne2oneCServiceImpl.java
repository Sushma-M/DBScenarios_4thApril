/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class IntOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntOne2oneC
 */
@Service("AllO2M_O2O.IntOne2oneCService")
public class IntOne2oneCServiceImpl implements IntOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(IntOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntOne2oneCDao")
    private WMGenericDao<IntOne2oneC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntOne2oneC, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<IntOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneC create(IntOne2oneC intone2onec) {
        LOGGER.debug("Creating a new intone2onec with information: {}" , intone2onec);
        return this.wmGenericDao.create(intone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneC delete(Integer intone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting intone2onec with id: {}" , intone2onecId);
        IntOne2oneC deleted = this.wmGenericDao.findById(intone2onecId);
        if (deleted == null) {
            LOGGER.debug("No intone2onec found with id: {}" , intone2onecId);
            throw new EntityNotFoundException(String.valueOf(intone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all intone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all intone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneC findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding intone2onec by id: {}" , id);
        IntOne2oneC intone2onec=this.wmGenericDao.findById(id);
        if(intone2onec==null){
            LOGGER.debug("No intone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return intone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneC update(IntOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating intone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIntId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


