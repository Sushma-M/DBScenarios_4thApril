/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigIntMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigIntMany2oneP
 */
@Service("AllO2M_O2O.BigIntMany2onePService")
public class BigIntMany2onePServiceImpl implements BigIntMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntMany2onePDao")
    private WMGenericDao<BigIntMany2oneP, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigIntMany2oneP, BigInteger> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigIntMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneP create(BigIntMany2oneP bigintmany2onep) {
        LOGGER.debug("Creating a new bigintmany2onep with information: {}" , bigintmany2onep);
        return this.wmGenericDao.create(bigintmany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneP delete(BigInteger bigintmany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigintmany2onep with id: {}" , bigintmany2onepId);
        BigIntMany2oneP deleted = this.wmGenericDao.findById(bigintmany2onepId);
        if (deleted == null) {
            LOGGER.debug("No bigintmany2onep found with id: {}" , bigintmany2onepId);
            throw new EntityNotFoundException(String.valueOf(bigintmany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigIntMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigintmany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigIntMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigintmany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneP findById(BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigintmany2onep by id: {}" , id);
        BigIntMany2oneP bigintmany2onep=this.wmGenericDao.findById(id);
        if(bigintmany2onep==null){
            LOGGER.debug("No bigintmany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigintmany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneP update(BigIntMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigintmany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigInteger id = (BigInteger)updated.getBigIntId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


