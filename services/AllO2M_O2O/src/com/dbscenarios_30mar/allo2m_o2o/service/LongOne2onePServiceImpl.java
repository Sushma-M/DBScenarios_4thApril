/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class LongOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.LongOne2oneP
 */
@Service("AllO2M_O2O.LongOne2onePService")
public class LongOne2onePServiceImpl implements LongOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LongOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.LongOne2onePDao")
    private WMGenericDao<LongOne2oneP, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LongOne2oneP, BigInteger> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<LongOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public LongOne2oneP create(LongOne2oneP longone2onep) {
        LOGGER.debug("Creating a new longone2onep with information: {}" , longone2onep);
        return this.wmGenericDao.create(longone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public LongOne2oneP delete(BigInteger longone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting longone2onep with id: {}" , longone2onepId);
        LongOne2oneP deleted = this.wmGenericDao.findById(longone2onepId);
        if (deleted == null) {
            LOGGER.debug("No longone2onep found with id: {}" , longone2onepId);
            throw new EntityNotFoundException(String.valueOf(longone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<LongOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all longone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<LongOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all longone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public LongOne2oneP findById(BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Finding longone2onep by id: {}" , id);
        LongOne2oneP longone2onep=this.wmGenericDao.findById(id);
        if(longone2onep==null){
            LOGGER.debug("No longone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return longone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public LongOne2oneP update(LongOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating longone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigInteger id = (BigInteger)updated.getLongId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


