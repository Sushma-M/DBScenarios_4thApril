/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.joda.time.LocalDateTime;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DatetimeOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeOne2oneP
 */
@Service("AllO2M_O2O.DatetimeOne2onePService")
public class DatetimeOne2onePServiceImpl implements DatetimeOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeOne2onePDao")
    private WMGenericDao<DatetimeOne2oneP, LocalDateTime> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DatetimeOne2oneP, LocalDateTime> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DatetimeOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneP create(DatetimeOne2oneP datetimeone2onep) {
        LOGGER.debug("Creating a new datetimeone2onep with information: {}" , datetimeone2onep);
        return this.wmGenericDao.create(datetimeone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneP delete(LocalDateTime datetimeone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting datetimeone2onep with id: {}" , datetimeone2onepId);
        DatetimeOne2oneP deleted = this.wmGenericDao.findById(datetimeone2onepId);
        if (deleted == null) {
            LOGGER.debug("No datetimeone2onep found with id: {}" , datetimeone2onepId);
            throw new EntityNotFoundException(String.valueOf(datetimeone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all datetimeone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all datetimeone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneP findById(LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Finding datetimeone2onep by id: {}" , id);
        DatetimeOne2oneP datetimeone2onep=this.wmGenericDao.findById(id);
        if(datetimeone2onep==null){
            LOGGER.debug("No datetimeone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return datetimeone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneP update(DatetimeOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating datetimeone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        LocalDateTime id = (LocalDateTime)updated.getDatetimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


