/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.joda.time.LocalDateTime;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;

/**
 * Service object for domain model class DatetimeOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeOne2oneP
 */

public interface DatetimeOne2onePService {
   /**
	 * Creates a new datetimeone2onep.
	 * 
	 * @param created
	 *            The information of the created datetimeone2onep.
	 * @return The created datetimeone2onep.
	 */
	public DatetimeOne2oneP create(DatetimeOne2oneP created);

	/**
	 * Deletes a datetimeone2onep.
	 * 
	 * @param datetimeone2onepId
	 *            The id of the deleted datetimeone2onep.
	 * @return The deleted datetimeone2onep.
	 * @throws EntityNotFoundException
	 *             if no datetimeone2onep is found with the given id.
	 */
	public DatetimeOne2oneP delete(LocalDateTime datetimeone2onepId) throws EntityNotFoundException;

	/**
	 * Finds all datetimeone2oneps.
	 * 
	 * @return A list of datetimeone2oneps.
	 */
	public Page<DatetimeOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DatetimeOne2oneP> findAll(Pageable pageable);
	
	/**
	 * Finds datetimeone2onep by id.
	 * 
	 * @param id
	 *            The id of the wanted datetimeone2onep.
	 * @return The found datetimeone2onep. If no datetimeone2onep is found, this method returns
	 *         null.
	 */
	public DatetimeOne2oneP findById(LocalDateTime id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a datetimeone2onep.
	 * 
	 * @param updated
	 *            The information of the updated datetimeone2onep.
	 * @return The updated datetimeone2onep.
	 * @throws EntityNotFoundException
	 *             if no datetimeone2onep is found with given id.
	 */
	public DatetimeOne2oneP update(DatetimeOne2oneP updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the datetimeone2oneps in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the datetimeone2onep.
	 */

	public long countAll();


    public Page<DatetimeOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

