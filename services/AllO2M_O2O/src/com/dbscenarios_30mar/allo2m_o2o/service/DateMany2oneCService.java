/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;

/**
 * Service object for domain model class DateMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateMany2oneC
 */

public interface DateMany2oneCService {
   /**
	 * Creates a new datemany2onec.
	 * 
	 * @param created
	 *            The information of the created datemany2onec.
	 * @return The created datemany2onec.
	 */
	public DateMany2oneC create(DateMany2oneC created);

	/**
	 * Deletes a datemany2onec.
	 * 
	 * @param datemany2onecId
	 *            The id of the deleted datemany2onec.
	 * @return The deleted datemany2onec.
	 * @throws EntityNotFoundException
	 *             if no datemany2onec is found with the given id.
	 */
	public DateMany2oneC delete(Date datemany2onecId) throws EntityNotFoundException;

	/**
	 * Finds all datemany2onecs.
	 * 
	 * @return A list of datemany2onecs.
	 */
	public Page<DateMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DateMany2oneC> findAll(Pageable pageable);
	
	/**
	 * Finds datemany2onec by id.
	 * 
	 * @param id
	 *            The id of the wanted datemany2onec.
	 * @return The found datemany2onec. If no datemany2onec is found, this method returns
	 *         null.
	 */
	public DateMany2oneC findById(Date id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a datemany2onec.
	 * 
	 * @param updated
	 *            The information of the updated datemany2onec.
	 * @return The updated datemany2onec.
	 * @throws EntityNotFoundException
	 *             if no datemany2onec is found with given id.
	 */
	public DateMany2oneC update(DateMany2oneC updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the datemany2onecs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the datemany2onec.
	 */

	public long countAll();


    public Page<DateMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

