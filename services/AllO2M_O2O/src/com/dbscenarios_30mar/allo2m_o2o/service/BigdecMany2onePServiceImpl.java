/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigdecMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecMany2oneP
 */
@Service("AllO2M_O2O.BigdecMany2onePService")
public class BigdecMany2onePServiceImpl implements BigdecMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecMany2onePDao")
    private WMGenericDao<BigdecMany2oneP, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigdecMany2oneP, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigdecMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneP create(BigdecMany2oneP bigdecmany2onep) {
        LOGGER.debug("Creating a new bigdecmany2onep with information: {}" , bigdecmany2onep);
        return this.wmGenericDao.create(bigdecmany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneP delete(BigDecimal bigdecmany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigdecmany2onep with id: {}" , bigdecmany2onepId);
        BigdecMany2oneP deleted = this.wmGenericDao.findById(bigdecmany2onepId);
        if (deleted == null) {
            LOGGER.debug("No bigdecmany2onep found with id: {}" , bigdecmany2onepId);
            throw new EntityNotFoundException(String.valueOf(bigdecmany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigdecmany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigdecmany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneP findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigdecmany2onep by id: {}" , id);
        BigdecMany2oneP bigdecmany2onep=this.wmGenericDao.findById(id);
        if(bigdecmany2onep==null){
            LOGGER.debug("No bigdecmany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigdecmany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecMany2oneP update(BigdecMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigdecmany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getBigdecId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


