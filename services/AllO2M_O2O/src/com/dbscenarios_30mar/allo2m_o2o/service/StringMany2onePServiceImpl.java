/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class StringMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringMany2oneP
 */
@Service("AllO2M_O2O.StringMany2onePService")
public class StringMany2onePServiceImpl implements StringMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StringMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringMany2onePDao")
    private WMGenericDao<StringMany2oneP, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StringMany2oneP, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<StringMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneP create(StringMany2oneP stringmany2onep) {
        LOGGER.debug("Creating a new stringmany2onep with information: {}" , stringmany2onep);
        return this.wmGenericDao.create(stringmany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneP delete(String stringmany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting stringmany2onep with id: {}" , stringmany2onepId);
        StringMany2oneP deleted = this.wmGenericDao.findById(stringmany2onepId);
        if (deleted == null) {
            LOGGER.debug("No stringmany2onep found with id: {}" , stringmany2onepId);
            throw new EntityNotFoundException(String.valueOf(stringmany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all stringmany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all stringmany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneP findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding stringmany2onep by id: {}" , id);
        StringMany2oneP stringmany2onep=this.wmGenericDao.findById(id);
        if(stringmany2onep==null){
            LOGGER.debug("No stringmany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return stringmany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneP update(StringMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating stringmany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getStringId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


