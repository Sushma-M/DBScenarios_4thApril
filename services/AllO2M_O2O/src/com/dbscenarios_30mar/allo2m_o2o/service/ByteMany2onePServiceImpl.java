/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class ByteMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.ByteMany2oneP
 */
@Service("AllO2M_O2O.ByteMany2onePService")
public class ByteMany2onePServiceImpl implements ByteMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ByteMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ByteMany2onePDao")
    private WMGenericDao<ByteMany2oneP, Byte> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ByteMany2oneP, Byte> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<ByteMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteMany2oneP create(ByteMany2oneP bytemany2onep) {
        LOGGER.debug("Creating a new bytemany2onep with information: {}" , bytemany2onep);
        return this.wmGenericDao.create(bytemany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteMany2oneP delete(Byte bytemany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bytemany2onep with id: {}" , bytemany2onepId);
        ByteMany2oneP deleted = this.wmGenericDao.findById(bytemany2onepId);
        if (deleted == null) {
            LOGGER.debug("No bytemany2onep found with id: {}" , bytemany2onepId);
            throw new EntityNotFoundException(String.valueOf(bytemany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bytemany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bytemany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteMany2oneP findById(Byte id) throws EntityNotFoundException {
        LOGGER.debug("Finding bytemany2onep by id: {}" , id);
        ByteMany2oneP bytemany2onep=this.wmGenericDao.findById(id);
        if(bytemany2onep==null){
            LOGGER.debug("No bytemany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bytemany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteMany2oneP update(ByteMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bytemany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Byte id = (Byte)updated.getByteId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


