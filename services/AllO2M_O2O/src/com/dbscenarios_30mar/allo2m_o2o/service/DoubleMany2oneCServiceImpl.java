/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DoubleMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleMany2oneC
 */
@Service("AllO2M_O2O.DoubleMany2oneCService")
public class DoubleMany2oneCServiceImpl implements DoubleMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleMany2oneCDao")
    private WMGenericDao<DoubleMany2oneC, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DoubleMany2oneC, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DoubleMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneC create(DoubleMany2oneC doublemany2onec) {
        LOGGER.debug("Creating a new doublemany2onec with information: {}" , doublemany2onec);
        return this.wmGenericDao.create(doublemany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneC delete(Double doublemany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting doublemany2onec with id: {}" , doublemany2onecId);
        DoubleMany2oneC deleted = this.wmGenericDao.findById(doublemany2onecId);
        if (deleted == null) {
            LOGGER.debug("No doublemany2onec found with id: {}" , doublemany2onecId);
            throw new EntityNotFoundException(String.valueOf(doublemany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all doublemany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all doublemany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneC findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding doublemany2onec by id: {}" , id);
        DoubleMany2oneC doublemany2onec=this.wmGenericDao.findById(id);
        if(doublemany2onec==null){
            LOGGER.debug("No doublemany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return doublemany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneC update(DoubleMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating doublemany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getDoubleId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


