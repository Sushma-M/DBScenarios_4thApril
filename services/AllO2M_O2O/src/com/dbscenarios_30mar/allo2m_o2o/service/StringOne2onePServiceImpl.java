/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class StringOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringOne2oneP
 */
@Service("AllO2M_O2O.StringOne2onePService")
public class StringOne2onePServiceImpl implements StringOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StringOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringOne2onePDao")
    private WMGenericDao<StringOne2oneP, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StringOne2oneP, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<StringOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneP create(StringOne2oneP stringone2onep) {
        LOGGER.debug("Creating a new stringone2onep with information: {}" , stringone2onep);
        return this.wmGenericDao.create(stringone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneP delete(String stringone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting stringone2onep with id: {}" , stringone2onepId);
        StringOne2oneP deleted = this.wmGenericDao.findById(stringone2onepId);
        if (deleted == null) {
            LOGGER.debug("No stringone2onep found with id: {}" , stringone2onepId);
            throw new EntityNotFoundException(String.valueOf(stringone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all stringone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all stringone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneP findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding stringone2onep by id: {}" , id);
        StringOne2oneP stringone2onep=this.wmGenericDao.findById(id);
        if(stringone2onep==null){
            LOGGER.debug("No stringone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return stringone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneP update(StringOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating stringone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getStringId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


