/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class StringMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringMany2oneC
 */
@Service("AllO2M_O2O.StringMany2oneCService")
public class StringMany2oneCServiceImpl implements StringMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StringMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringMany2oneCDao")
    private WMGenericDao<StringMany2oneC, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StringMany2oneC, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<StringMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneC create(StringMany2oneC stringmany2onec) {
        LOGGER.debug("Creating a new stringmany2onec with information: {}" , stringmany2onec);
        return this.wmGenericDao.create(stringmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneC delete(String stringmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting stringmany2onec with id: {}" , stringmany2onecId);
        StringMany2oneC deleted = this.wmGenericDao.findById(stringmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No stringmany2onec found with id: {}" , stringmany2onecId);
            throw new EntityNotFoundException(String.valueOf(stringmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all stringmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all stringmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneC findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding stringmany2onec by id: {}" , id);
        StringMany2oneC stringmany2onec=this.wmGenericDao.findById(id);
        if(stringmany2onec==null){
            LOGGER.debug("No stringmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return stringmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringMany2oneC update(StringMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating stringmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getStringId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


