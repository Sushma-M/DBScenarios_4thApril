/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class CharMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.CharMany2oneC
 */
@Service("AllO2M_O2O.CharMany2oneCService")
public class CharMany2oneCServiceImpl implements CharMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CharMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.CharMany2oneCDao")
    private WMGenericDao<CharMany2oneC, Character> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CharMany2oneC, Character> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<CharMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public CharMany2oneC create(CharMany2oneC charmany2onec) {
        LOGGER.debug("Creating a new charmany2onec with information: {}" , charmany2onec);
        return this.wmGenericDao.create(charmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharMany2oneC delete(Character charmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting charmany2onec with id: {}" , charmany2onecId);
        CharMany2oneC deleted = this.wmGenericDao.findById(charmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No charmany2onec found with id: {}" , charmany2onecId);
            throw new EntityNotFoundException(String.valueOf(charmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<CharMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all charmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<CharMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all charmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharMany2oneC findById(Character id) throws EntityNotFoundException {
        LOGGER.debug("Finding charmany2onec by id: {}" , id);
        CharMany2oneC charmany2onec=this.wmGenericDao.findById(id);
        if(charmany2onec==null){
            LOGGER.debug("No charmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return charmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharMany2oneC update(CharMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating charmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Character id = (Character)updated.getCharId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


