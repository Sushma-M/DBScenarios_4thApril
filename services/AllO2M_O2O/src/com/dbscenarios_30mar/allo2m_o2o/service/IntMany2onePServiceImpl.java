/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class IntMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntMany2oneP
 */
@Service("AllO2M_O2O.IntMany2onePService")
public class IntMany2onePServiceImpl implements IntMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(IntMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntMany2onePDao")
    private WMGenericDao<IntMany2oneP, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntMany2oneP, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<IntMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneP create(IntMany2oneP intmany2onep) {
        LOGGER.debug("Creating a new intmany2onep with information: {}" , intmany2onep);
        return this.wmGenericDao.create(intmany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneP delete(Integer intmany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting intmany2onep with id: {}" , intmany2onepId);
        IntMany2oneP deleted = this.wmGenericDao.findById(intmany2onepId);
        if (deleted == null) {
            LOGGER.debug("No intmany2onep found with id: {}" , intmany2onepId);
            throw new EntityNotFoundException(String.valueOf(intmany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all intmany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all intmany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneP findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding intmany2onep by id: {}" , id);
        IntMany2oneP intmany2onep=this.wmGenericDao.findById(id);
        if(intmany2onep==null){
            LOGGER.debug("No intmany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return intmany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneP update(IntMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating intmany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


