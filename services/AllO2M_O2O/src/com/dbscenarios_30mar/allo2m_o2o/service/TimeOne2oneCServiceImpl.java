/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class TimeOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeOne2oneC
 */
@Service("AllO2M_O2O.TimeOne2oneCService")
public class TimeOne2oneCServiceImpl implements TimeOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TimeOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeOne2oneCDao")
    private WMGenericDao<TimeOne2oneC, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimeOne2oneC, Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<TimeOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneC create(TimeOne2oneC timeone2onec) {
        LOGGER.debug("Creating a new timeone2onec with information: {}" , timeone2onec);
        return this.wmGenericDao.create(timeone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneC delete(Date timeone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting timeone2onec with id: {}" , timeone2onecId);
        TimeOne2oneC deleted = this.wmGenericDao.findById(timeone2onecId);
        if (deleted == null) {
            LOGGER.debug("No timeone2onec found with id: {}" , timeone2onecId);
            throw new EntityNotFoundException(String.valueOf(timeone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all timeone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all timeone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneC findById(Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding timeone2onec by id: {}" , id);
        TimeOne2oneC timeone2onec=this.wmGenericDao.findById(id);
        if(timeone2onec==null){
            LOGGER.debug("No timeone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return timeone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneC update(TimeOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating timeone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Date id = (Date)updated.getTimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


