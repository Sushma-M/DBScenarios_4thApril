/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigIntMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigIntMany2oneC
 */
@Service("AllO2M_O2O.BigIntMany2oneCService")
public class BigIntMany2oneCServiceImpl implements BigIntMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigIntMany2oneCDao")
    private WMGenericDao<BigIntMany2oneC, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigIntMany2oneC, BigInteger> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigIntMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneC create(BigIntMany2oneC bigintmany2onec) {
        LOGGER.debug("Creating a new bigintmany2onec with information: {}" , bigintmany2onec);
        return this.wmGenericDao.create(bigintmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneC delete(BigInteger bigintmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigintmany2onec with id: {}" , bigintmany2onecId);
        BigIntMany2oneC deleted = this.wmGenericDao.findById(bigintmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No bigintmany2onec found with id: {}" , bigintmany2onecId);
            throw new EntityNotFoundException(String.valueOf(bigintmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigIntMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigintmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigIntMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigintmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneC findById(BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigintmany2onec by id: {}" , id);
        BigIntMany2oneC bigintmany2onec=this.wmGenericDao.findById(id);
        if(bigintmany2onec==null){
            LOGGER.debug("No bigintmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigintmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigIntMany2oneC update(BigIntMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigintmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigInteger id = (BigInteger)updated.getBigIntId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


