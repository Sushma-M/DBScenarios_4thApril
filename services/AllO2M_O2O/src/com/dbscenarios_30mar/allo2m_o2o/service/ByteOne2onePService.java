/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;

/**
 * Service object for domain model class ByteOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.ByteOne2oneP
 */

public interface ByteOne2onePService {
   /**
	 * Creates a new byteone2onep.
	 * 
	 * @param created
	 *            The information of the created byteone2onep.
	 * @return The created byteone2onep.
	 */
	public ByteOne2oneP create(ByteOne2oneP created);

	/**
	 * Deletes a byteone2onep.
	 * 
	 * @param byteone2onepId
	 *            The id of the deleted byteone2onep.
	 * @return The deleted byteone2onep.
	 * @throws EntityNotFoundException
	 *             if no byteone2onep is found with the given id.
	 */
	public ByteOne2oneP delete(Byte byteone2onepId) throws EntityNotFoundException;

	/**
	 * Finds all byteone2oneps.
	 * 
	 * @return A list of byteone2oneps.
	 */
	public Page<ByteOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ByteOne2oneP> findAll(Pageable pageable);
	
	/**
	 * Finds byteone2onep by id.
	 * 
	 * @param id
	 *            The id of the wanted byteone2onep.
	 * @return The found byteone2onep. If no byteone2onep is found, this method returns
	 *         null.
	 */
	public ByteOne2oneP findById(Byte id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a byteone2onep.
	 * 
	 * @param updated
	 *            The information of the updated byteone2onep.
	 * @return The updated byteone2onep.
	 * @throws EntityNotFoundException
	 *             if no byteone2onep is found with given id.
	 */
	public ByteOne2oneP update(ByteOne2oneP updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the byteone2oneps in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the byteone2onep.
	 */

	public long countAll();


    public Page<ByteOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

