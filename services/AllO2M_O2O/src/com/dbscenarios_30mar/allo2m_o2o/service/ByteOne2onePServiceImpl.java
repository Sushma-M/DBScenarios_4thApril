/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class ByteOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.ByteOne2oneP
 */
@Service("AllO2M_O2O.ByteOne2onePService")
public class ByteOne2onePServiceImpl implements ByteOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ByteOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ByteOne2onePDao")
    private WMGenericDao<ByteOne2oneP, Byte> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ByteOne2oneP, Byte> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<ByteOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneP create(ByteOne2oneP byteone2onep) {
        LOGGER.debug("Creating a new byteone2onep with information: {}" , byteone2onep);
        return this.wmGenericDao.create(byteone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneP delete(Byte byteone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting byteone2onep with id: {}" , byteone2onepId);
        ByteOne2oneP deleted = this.wmGenericDao.findById(byteone2onepId);
        if (deleted == null) {
            LOGGER.debug("No byteone2onep found with id: {}" , byteone2onepId);
            throw new EntityNotFoundException(String.valueOf(byteone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all byteone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all byteone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneP findById(Byte id) throws EntityNotFoundException {
        LOGGER.debug("Finding byteone2onep by id: {}" , id);
        ByteOne2oneP byteone2onep=this.wmGenericDao.findById(id);
        if(byteone2onep==null){
            LOGGER.debug("No byteone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return byteone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneP update(ByteOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating byteone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Byte id = (Byte)updated.getByteId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


