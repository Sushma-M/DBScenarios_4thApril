/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class IntOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntOne2oneP
 */
@Service("AllO2M_O2O.IntOne2onePService")
public class IntOne2onePServiceImpl implements IntOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(IntOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntOne2onePDao")
    private WMGenericDao<IntOne2oneP, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntOne2oneP, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<IntOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneP create(IntOne2oneP intone2onep) {
        LOGGER.debug("Creating a new intone2onep with information: {}" , intone2onep);
        return this.wmGenericDao.create(intone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneP delete(Integer intone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting intone2onep with id: {}" , intone2onepId);
        IntOne2oneP deleted = this.wmGenericDao.findById(intone2onepId);
        if (deleted == null) {
            LOGGER.debug("No intone2onep found with id: {}" , intone2onepId);
            throw new EntityNotFoundException(String.valueOf(intone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all intone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all intone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneP findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding intone2onep by id: {}" , id);
        IntOne2oneP intone2onep=this.wmGenericDao.findById(id);
        if(intone2onep==null){
            LOGGER.debug("No intone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return intone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntOne2oneP update(IntOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating intone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIntId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


