/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.joda.time.LocalDateTime;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DatetimeOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeOne2oneC
 */
@Service("AllO2M_O2O.DatetimeOne2oneCService")
public class DatetimeOne2oneCServiceImpl implements DatetimeOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeOne2oneCDao")
    private WMGenericDao<DatetimeOne2oneC, LocalDateTime> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DatetimeOne2oneC, LocalDateTime> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DatetimeOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneC create(DatetimeOne2oneC datetimeone2onec) {
        LOGGER.debug("Creating a new datetimeone2onec with information: {}" , datetimeone2onec);
        return this.wmGenericDao.create(datetimeone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneC delete(LocalDateTime datetimeone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting datetimeone2onec with id: {}" , datetimeone2onecId);
        DatetimeOne2oneC deleted = this.wmGenericDao.findById(datetimeone2onecId);
        if (deleted == null) {
            LOGGER.debug("No datetimeone2onec found with id: {}" , datetimeone2onecId);
            throw new EntityNotFoundException(String.valueOf(datetimeone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all datetimeone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all datetimeone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneC findById(LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Finding datetimeone2onec by id: {}" , id);
        DatetimeOne2oneC datetimeone2onec=this.wmGenericDao.findById(id);
        if(datetimeone2onec==null){
            LOGGER.debug("No datetimeone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return datetimeone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeOne2oneC update(DatetimeOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating datetimeone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        LocalDateTime id = (LocalDateTime)updated.getDatetimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


