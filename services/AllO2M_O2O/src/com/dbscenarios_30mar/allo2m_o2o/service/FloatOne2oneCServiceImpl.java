/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class FloatOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.FloatOne2oneC
 */
@Service("AllO2M_O2O.FloatOne2oneCService")
public class FloatOne2oneCServiceImpl implements FloatOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(FloatOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.FloatOne2oneCDao")
    private WMGenericDao<FloatOne2oneC, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FloatOne2oneC, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<FloatOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneC create(FloatOne2oneC floatone2onec) {
        LOGGER.debug("Creating a new floatone2onec with information: {}" , floatone2onec);
        return this.wmGenericDao.create(floatone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneC delete(Double floatone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting floatone2onec with id: {}" , floatone2onecId);
        FloatOne2oneC deleted = this.wmGenericDao.findById(floatone2onecId);
        if (deleted == null) {
            LOGGER.debug("No floatone2onec found with id: {}" , floatone2onecId);
            throw new EntityNotFoundException(String.valueOf(floatone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all floatone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all floatone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneC findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding floatone2onec by id: {}" , id);
        FloatOne2oneC floatone2onec=this.wmGenericDao.findById(id);
        if(floatone2onec==null){
            LOGGER.debug("No floatone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return floatone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneC update(FloatOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating floatone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getFloatId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


