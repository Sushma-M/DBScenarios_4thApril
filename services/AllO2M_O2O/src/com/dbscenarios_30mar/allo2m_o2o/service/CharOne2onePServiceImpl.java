/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class CharOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.CharOne2oneP
 */
@Service("AllO2M_O2O.CharOne2onePService")
public class CharOne2onePServiceImpl implements CharOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CharOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.CharOne2onePDao")
    private WMGenericDao<CharOne2oneP, Character> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CharOne2oneP, Character> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<CharOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public CharOne2oneP create(CharOne2oneP charone2onep) {
        LOGGER.debug("Creating a new charone2onep with information: {}" , charone2onep);
        return this.wmGenericDao.create(charone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharOne2oneP delete(Character charone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting charone2onep with id: {}" , charone2onepId);
        CharOne2oneP deleted = this.wmGenericDao.findById(charone2onepId);
        if (deleted == null) {
            LOGGER.debug("No charone2onep found with id: {}" , charone2onepId);
            throw new EntityNotFoundException(String.valueOf(charone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<CharOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all charone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<CharOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all charone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharOne2oneP findById(Character id) throws EntityNotFoundException {
        LOGGER.debug("Finding charone2onep by id: {}" , id);
        CharOne2oneP charone2onep=this.wmGenericDao.findById(id);
        if(charone2onep==null){
            LOGGER.debug("No charone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return charone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public CharOne2oneP update(CharOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating charone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Character id = (Character)updated.getCharId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


