/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DateMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateMany2oneP
 */
@Service("AllO2M_O2O.DateMany2onePService")
public class DateMany2onePServiceImpl implements DateMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DateMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DateMany2onePDao")
    private WMGenericDao<DateMany2oneP, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DateMany2oneP, Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DateMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DateMany2oneP create(DateMany2oneP datemany2onep) {
        LOGGER.debug("Creating a new datemany2onep with information: {}" , datemany2onep);
        return this.wmGenericDao.create(datemany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DateMany2oneP delete(Date datemany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting datemany2onep with id: {}" , datemany2onepId);
        DateMany2oneP deleted = this.wmGenericDao.findById(datemany2onepId);
        if (deleted == null) {
            LOGGER.debug("No datemany2onep found with id: {}" , datemany2onepId);
            throw new EntityNotFoundException(String.valueOf(datemany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DateMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all datemany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DateMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all datemany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DateMany2oneP findById(Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding datemany2onep by id: {}" , id);
        DateMany2oneP datemany2onep=this.wmGenericDao.findById(id);
        if(datemany2onep==null){
            LOGGER.debug("No datemany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return datemany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DateMany2oneP update(DateMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating datemany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Date id = (Date)updated.getDateId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


