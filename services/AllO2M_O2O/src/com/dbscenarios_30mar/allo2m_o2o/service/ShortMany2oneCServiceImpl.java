/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class ShortMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.ShortMany2oneC
 */
@Service("AllO2M_O2O.ShortMany2oneCService")
public class ShortMany2oneCServiceImpl implements ShortMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ShortMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ShortMany2oneCDao")
    private WMGenericDao<ShortMany2oneC, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ShortMany2oneC, Short> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<ShortMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortMany2oneC create(ShortMany2oneC shortmany2onec) {
        LOGGER.debug("Creating a new shortmany2onec with information: {}" , shortmany2onec);
        return this.wmGenericDao.create(shortmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortMany2oneC delete(Short shortmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting shortmany2onec with id: {}" , shortmany2onecId);
        ShortMany2oneC deleted = this.wmGenericDao.findById(shortmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No shortmany2onec found with id: {}" , shortmany2onecId);
            throw new EntityNotFoundException(String.valueOf(shortmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ShortMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all shortmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ShortMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all shortmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortMany2oneC findById(Short id) throws EntityNotFoundException {
        LOGGER.debug("Finding shortmany2onec by id: {}" , id);
        ShortMany2oneC shortmany2onec=this.wmGenericDao.findById(id);
        if(shortmany2onec==null){
            LOGGER.debug("No shortmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return shortmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortMany2oneC update(ShortMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating shortmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Short id = (Short)updated.getShortId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


