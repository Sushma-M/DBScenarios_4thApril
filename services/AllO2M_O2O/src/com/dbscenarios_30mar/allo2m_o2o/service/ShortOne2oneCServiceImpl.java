/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class ShortOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.ShortOne2oneC
 */
@Service("AllO2M_O2O.ShortOne2oneCService")
public class ShortOne2oneCServiceImpl implements ShortOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ShortOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ShortOne2oneCDao")
    private WMGenericDao<ShortOne2oneC, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ShortOne2oneC, Short> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<ShortOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortOne2oneC create(ShortOne2oneC shortone2onec) {
        LOGGER.debug("Creating a new shortone2onec with information: {}" , shortone2onec);
        return this.wmGenericDao.create(shortone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortOne2oneC delete(Short shortone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting shortone2onec with id: {}" , shortone2onecId);
        ShortOne2oneC deleted = this.wmGenericDao.findById(shortone2onecId);
        if (deleted == null) {
            LOGGER.debug("No shortone2onec found with id: {}" , shortone2onecId);
            throw new EntityNotFoundException(String.valueOf(shortone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ShortOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all shortone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ShortOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all shortone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortOne2oneC findById(Short id) throws EntityNotFoundException {
        LOGGER.debug("Finding shortone2onec by id: {}" , id);
        ShortOne2oneC shortone2onec=this.wmGenericDao.findById(id);
        if(shortone2onec==null){
            LOGGER.debug("No shortone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return shortone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ShortOne2oneC update(ShortOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating shortone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Short id = (Short)updated.getShortId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


