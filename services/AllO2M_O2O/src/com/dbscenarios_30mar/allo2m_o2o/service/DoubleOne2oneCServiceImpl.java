/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DoubleOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleOne2oneC
 */
@Service("AllO2M_O2O.DoubleOne2oneCService")
public class DoubleOne2oneCServiceImpl implements DoubleOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleOne2oneCDao")
    private WMGenericDao<DoubleOne2oneC, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DoubleOne2oneC, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DoubleOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleOne2oneC create(DoubleOne2oneC doubleone2onec) {
        LOGGER.debug("Creating a new doubleone2onec with information: {}" , doubleone2onec);
        return this.wmGenericDao.create(doubleone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleOne2oneC delete(Double doubleone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting doubleone2onec with id: {}" , doubleone2onecId);
        DoubleOne2oneC deleted = this.wmGenericDao.findById(doubleone2onecId);
        if (deleted == null) {
            LOGGER.debug("No doubleone2onec found with id: {}" , doubleone2onecId);
            throw new EntityNotFoundException(String.valueOf(doubleone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all doubleone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all doubleone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleOne2oneC findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding doubleone2onec by id: {}" , id);
        DoubleOne2oneC doubleone2onec=this.wmGenericDao.findById(id);
        if(doubleone2onec==null){
            LOGGER.debug("No doubleone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return doubleone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleOne2oneC update(DoubleOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating doubleone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getDoubleId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


