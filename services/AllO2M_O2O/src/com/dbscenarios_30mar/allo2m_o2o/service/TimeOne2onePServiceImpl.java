/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class TimeOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeOne2oneP
 */
@Service("AllO2M_O2O.TimeOne2onePService")
public class TimeOne2onePServiceImpl implements TimeOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TimeOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeOne2onePDao")
    private WMGenericDao<TimeOne2oneP, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimeOne2oneP, Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<TimeOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneP create(TimeOne2oneP timeone2onep) {
        LOGGER.debug("Creating a new timeone2onep with information: {}" , timeone2onep);
        return this.wmGenericDao.create(timeone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneP delete(Date timeone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting timeone2onep with id: {}" , timeone2onepId);
        TimeOne2oneP deleted = this.wmGenericDao.findById(timeone2onepId);
        if (deleted == null) {
            LOGGER.debug("No timeone2onep found with id: {}" , timeone2onepId);
            throw new EntityNotFoundException(String.valueOf(timeone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all timeone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all timeone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneP findById(Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding timeone2onep by id: {}" , id);
        TimeOne2oneP timeone2onep=this.wmGenericDao.findById(id);
        if(timeone2onep==null){
            LOGGER.debug("No timeone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return timeone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeOne2oneP update(TimeOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating timeone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Date id = (Date)updated.getTimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


