/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;

/**
 * Service object for domain model class DateMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DateMany2oneP
 */

public interface DateMany2onePService {
   /**
	 * Creates a new datemany2onep.
	 * 
	 * @param created
	 *            The information of the created datemany2onep.
	 * @return The created datemany2onep.
	 */
	public DateMany2oneP create(DateMany2oneP created);

	/**
	 * Deletes a datemany2onep.
	 * 
	 * @param datemany2onepId
	 *            The id of the deleted datemany2onep.
	 * @return The deleted datemany2onep.
	 * @throws EntityNotFoundException
	 *             if no datemany2onep is found with the given id.
	 */
	public DateMany2oneP delete(Date datemany2onepId) throws EntityNotFoundException;

	/**
	 * Finds all datemany2oneps.
	 * 
	 * @return A list of datemany2oneps.
	 */
	public Page<DateMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DateMany2oneP> findAll(Pageable pageable);
	
	/**
	 * Finds datemany2onep by id.
	 * 
	 * @param id
	 *            The id of the wanted datemany2onep.
	 * @return The found datemany2onep. If no datemany2onep is found, this method returns
	 *         null.
	 */
	public DateMany2oneP findById(Date id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a datemany2onep.
	 * 
	 * @param updated
	 *            The information of the updated datemany2onep.
	 * @return The updated datemany2onep.
	 * @throws EntityNotFoundException
	 *             if no datemany2onep is found with given id.
	 */
	public DateMany2oneP update(DateMany2oneP updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the datemany2oneps in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the datemany2onep.
	 */

	public long countAll();


    public Page<DateMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

