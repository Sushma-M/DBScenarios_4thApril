/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DoubleMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DoubleMany2oneP
 */
@Service("AllO2M_O2O.DoubleMany2onePService")
public class DoubleMany2onePServiceImpl implements DoubleMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DoubleMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DoubleMany2onePDao")
    private WMGenericDao<DoubleMany2oneP, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DoubleMany2oneP, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DoubleMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneP create(DoubleMany2oneP doublemany2onep) {
        LOGGER.debug("Creating a new doublemany2onep with information: {}" , doublemany2onep);
        return this.wmGenericDao.create(doublemany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneP delete(Double doublemany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting doublemany2onep with id: {}" , doublemany2onepId);
        DoubleMany2oneP deleted = this.wmGenericDao.findById(doublemany2onepId);
        if (deleted == null) {
            LOGGER.debug("No doublemany2onep found with id: {}" , doublemany2onepId);
            throw new EntityNotFoundException(String.valueOf(doublemany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all doublemany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DoubleMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all doublemany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneP findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding doublemany2onep by id: {}" , id);
        DoubleMany2oneP doublemany2onep=this.wmGenericDao.findById(id);
        if(doublemany2onep==null){
            LOGGER.debug("No doublemany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return doublemany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DoubleMany2oneP update(DoubleMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating doublemany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getDoubleId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


