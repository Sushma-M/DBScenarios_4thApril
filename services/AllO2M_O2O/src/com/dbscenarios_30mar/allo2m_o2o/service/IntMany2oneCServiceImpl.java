/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class IntMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.IntMany2oneC
 */
@Service("AllO2M_O2O.IntMany2oneCService")
public class IntMany2oneCServiceImpl implements IntMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(IntMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.IntMany2oneCDao")
    private WMGenericDao<IntMany2oneC, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<IntMany2oneC, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<IntMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneC create(IntMany2oneC intmany2onec) {
        LOGGER.debug("Creating a new intmany2onec with information: {}" , intmany2onec);
        return this.wmGenericDao.create(intmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneC delete(Integer intmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting intmany2onec with id: {}" , intmany2onecId);
        IntMany2oneC deleted = this.wmGenericDao.findById(intmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No intmany2onec found with id: {}" , intmany2onecId);
            throw new EntityNotFoundException(String.valueOf(intmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all intmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<IntMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all intmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneC findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding intmany2onec by id: {}" , id);
        IntMany2oneC intmany2onec=this.wmGenericDao.findById(id);
        if(intmany2onec==null){
            LOGGER.debug("No intmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return intmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public IntMany2oneC update(IntMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating intmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


