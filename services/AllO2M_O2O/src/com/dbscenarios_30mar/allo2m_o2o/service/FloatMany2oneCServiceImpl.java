/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class FloatMany2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.FloatMany2oneC
 */
@Service("AllO2M_O2O.FloatMany2oneCService")
public class FloatMany2oneCServiceImpl implements FloatMany2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(FloatMany2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.FloatMany2oneCDao")
    private WMGenericDao<FloatMany2oneC, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FloatMany2oneC, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<FloatMany2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatMany2oneC create(FloatMany2oneC floatmany2onec) {
        LOGGER.debug("Creating a new floatmany2onec with information: {}" , floatmany2onec);
        return this.wmGenericDao.create(floatmany2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatMany2oneC delete(Double floatmany2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting floatmany2onec with id: {}" , floatmany2onecId);
        FloatMany2oneC deleted = this.wmGenericDao.findById(floatmany2onecId);
        if (deleted == null) {
            LOGGER.debug("No floatmany2onec found with id: {}" , floatmany2onecId);
            throw new EntityNotFoundException(String.valueOf(floatmany2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatMany2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all floatmany2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatMany2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all floatmany2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatMany2oneC findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding floatmany2onec by id: {}" , id);
        FloatMany2oneC floatmany2onec=this.wmGenericDao.findById(id);
        if(floatmany2onec==null){
            LOGGER.debug("No floatmany2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return floatmany2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatMany2oneC update(FloatMany2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating floatmany2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getFloatId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


