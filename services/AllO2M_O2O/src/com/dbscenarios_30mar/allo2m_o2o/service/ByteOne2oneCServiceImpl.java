/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class ByteOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.ByteOne2oneC
 */
@Service("AllO2M_O2O.ByteOne2oneCService")
public class ByteOne2oneCServiceImpl implements ByteOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ByteOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.ByteOne2oneCDao")
    private WMGenericDao<ByteOne2oneC, Byte> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ByteOne2oneC, Byte> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<ByteOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneC create(ByteOne2oneC byteone2onec) {
        LOGGER.debug("Creating a new byteone2onec with information: {}" , byteone2onec);
        return this.wmGenericDao.create(byteone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneC delete(Byte byteone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting byteone2onec with id: {}" , byteone2onecId);
        ByteOne2oneC deleted = this.wmGenericDao.findById(byteone2onecId);
        if (deleted == null) {
            LOGGER.debug("No byteone2onec found with id: {}" , byteone2onecId);
            throw new EntityNotFoundException(String.valueOf(byteone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all byteone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<ByteOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all byteone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneC findById(Byte id) throws EntityNotFoundException {
        LOGGER.debug("Finding byteone2onec by id: {}" , id);
        ByteOne2oneC byteone2onec=this.wmGenericDao.findById(id);
        if(byteone2onec==null){
            LOGGER.debug("No byteone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return byteone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public ByteOne2oneC update(ByteOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating byteone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Byte id = (Byte)updated.getByteId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


