/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class StringOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.StringOne2oneC
 */
@Service("AllO2M_O2O.StringOne2oneCService")
public class StringOne2oneCServiceImpl implements StringOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(StringOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.StringOne2oneCDao")
    private WMGenericDao<StringOne2oneC, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<StringOne2oneC, String> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<StringOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneC create(StringOne2oneC stringone2onec) {
        LOGGER.debug("Creating a new stringone2onec with information: {}" , stringone2onec);
        return this.wmGenericDao.create(stringone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneC delete(String stringone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting stringone2onec with id: {}" , stringone2onecId);
        StringOne2oneC deleted = this.wmGenericDao.findById(stringone2onecId);
        if (deleted == null) {
            LOGGER.debug("No stringone2onec found with id: {}" , stringone2onecId);
            throw new EntityNotFoundException(String.valueOf(stringone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all stringone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<StringOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all stringone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneC findById(String id) throws EntityNotFoundException {
        LOGGER.debug("Finding stringone2onec by id: {}" , id);
        StringOne2oneC stringone2onec=this.wmGenericDao.findById(id);
        if(stringone2onec==null){
            LOGGER.debug("No stringone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return stringone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public StringOne2oneC update(StringOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating stringone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        String id = (String)updated.getStringId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


