/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigdecOne2oneC.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecOne2oneC
 */
@Service("AllO2M_O2O.BigdecOne2oneCService")
public class BigdecOne2oneCServiceImpl implements BigdecOne2oneCService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecOne2oneCServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecOne2oneCDao")
    private WMGenericDao<BigdecOne2oneC, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigdecOne2oneC, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigdecOne2oneC> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneC create(BigdecOne2oneC bigdecone2onec) {
        LOGGER.debug("Creating a new bigdecone2onec with information: {}" , bigdecone2onec);
        return this.wmGenericDao.create(bigdecone2onec);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneC delete(BigDecimal bigdecone2onecId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigdecone2onec with id: {}" , bigdecone2onecId);
        BigdecOne2oneC deleted = this.wmGenericDao.findById(bigdecone2onecId);
        if (deleted == null) {
            LOGGER.debug("No bigdecone2onec found with id: {}" , bigdecone2onecId);
            throw new EntityNotFoundException(String.valueOf(bigdecone2onecId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecOne2oneC> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigdecone2onecs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecOne2oneC> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigdecone2onecs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneC findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigdecone2onec by id: {}" , id);
        BigdecOne2oneC bigdecone2onec=this.wmGenericDao.findById(id);
        if(bigdecone2onec==null){
            LOGGER.debug("No bigdecone2onec found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigdecone2onec;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneC update(BigdecOne2oneC updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigdecone2onec with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getBigdecId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


