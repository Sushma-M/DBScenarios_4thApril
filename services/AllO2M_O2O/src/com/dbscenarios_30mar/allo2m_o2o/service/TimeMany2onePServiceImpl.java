/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Date;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class TimeMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.TimeMany2oneP
 */
@Service("AllO2M_O2O.TimeMany2onePService")
public class TimeMany2onePServiceImpl implements TimeMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TimeMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.TimeMany2onePDao")
    private WMGenericDao<TimeMany2oneP, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimeMany2oneP, Date> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<TimeMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeMany2oneP create(TimeMany2oneP timemany2onep) {
        LOGGER.debug("Creating a new timemany2onep with information: {}" , timemany2onep);
        return this.wmGenericDao.create(timemany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeMany2oneP delete(Date timemany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting timemany2onep with id: {}" , timemany2onepId);
        TimeMany2oneP deleted = this.wmGenericDao.findById(timemany2onepId);
        if (deleted == null) {
            LOGGER.debug("No timemany2onep found with id: {}" , timemany2onepId);
            throw new EntityNotFoundException(String.valueOf(timemany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all timemany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<TimeMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all timemany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeMany2oneP findById(Date id) throws EntityNotFoundException {
        LOGGER.debug("Finding timemany2onep by id: {}" , id);
        TimeMany2oneP timemany2onep=this.wmGenericDao.findById(id);
        if(timemany2onep==null){
            LOGGER.debug("No timemany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return timemany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public TimeMany2oneP update(TimeMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating timemany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Date id = (Date)updated.getTimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


