/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.joda.time.LocalDateTime;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class DatetimeMany2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.DatetimeMany2oneP
 */
@Service("AllO2M_O2O.DatetimeMany2onePService")
public class DatetimeMany2onePServiceImpl implements DatetimeMany2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeMany2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.DatetimeMany2onePDao")
    private WMGenericDao<DatetimeMany2oneP, LocalDateTime> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DatetimeMany2oneP, LocalDateTime> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<DatetimeMany2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeMany2oneP create(DatetimeMany2oneP datetimemany2onep) {
        LOGGER.debug("Creating a new datetimemany2onep with information: {}" , datetimemany2onep);
        return this.wmGenericDao.create(datetimemany2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeMany2oneP delete(LocalDateTime datetimemany2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting datetimemany2onep with id: {}" , datetimemany2onepId);
        DatetimeMany2oneP deleted = this.wmGenericDao.findById(datetimemany2onepId);
        if (deleted == null) {
            LOGGER.debug("No datetimemany2onep found with id: {}" , datetimemany2onepId);
            throw new EntityNotFoundException(String.valueOf(datetimemany2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeMany2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all datetimemany2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<DatetimeMany2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all datetimemany2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeMany2oneP findById(LocalDateTime id) throws EntityNotFoundException {
        LOGGER.debug("Finding datetimemany2onep by id: {}" , id);
        DatetimeMany2oneP datetimemany2onep=this.wmGenericDao.findById(id);
        if(datetimemany2onep==null){
            LOGGER.debug("No datetimemany2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return datetimemany2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public DatetimeMany2oneP update(DatetimeMany2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating datetimemany2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        LocalDateTime id = (LocalDateTime)updated.getDatetimeId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


