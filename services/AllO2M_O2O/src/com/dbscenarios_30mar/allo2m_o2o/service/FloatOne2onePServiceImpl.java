/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class FloatOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.FloatOne2oneP
 */
@Service("AllO2M_O2O.FloatOne2onePService")
public class FloatOne2onePServiceImpl implements FloatOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(FloatOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.FloatOne2onePDao")
    private WMGenericDao<FloatOne2oneP, Double> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FloatOne2oneP, Double> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<FloatOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneP create(FloatOne2oneP floatone2onep) {
        LOGGER.debug("Creating a new floatone2onep with information: {}" , floatone2onep);
        return this.wmGenericDao.create(floatone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneP delete(Double floatone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting floatone2onep with id: {}" , floatone2onepId);
        FloatOne2oneP deleted = this.wmGenericDao.findById(floatone2onepId);
        if (deleted == null) {
            LOGGER.debug("No floatone2onep found with id: {}" , floatone2onepId);
            throw new EntityNotFoundException(String.valueOf(floatone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all floatone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<FloatOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all floatone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneP findById(Double id) throws EntityNotFoundException {
        LOGGER.debug("Finding floatone2onep by id: {}" , id);
        FloatOne2oneP floatone2onep=this.wmGenericDao.findById(id);
        if(floatone2onep==null){
            LOGGER.debug("No floatone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return floatone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public FloatOne2oneP update(FloatOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating floatone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Double id = (Double)updated.getFloatId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


