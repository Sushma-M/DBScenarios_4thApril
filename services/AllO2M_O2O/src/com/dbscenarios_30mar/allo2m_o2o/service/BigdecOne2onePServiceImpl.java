/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.dbscenarios_30mar.allo2m_o2o.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.dbscenarios_30mar.allo2m_o2o.*;


/**
 * ServiceImpl object for domain model class BigdecOne2oneP.
 * @see com.dbscenarios_30mar.allo2m_o2o.BigdecOne2oneP
 */
@Service("AllO2M_O2O.BigdecOne2onePService")
public class BigdecOne2onePServiceImpl implements BigdecOne2onePService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BigdecOne2onePServiceImpl.class);

    @Autowired
    @Qualifier("AllO2M_O2O.BigdecOne2onePDao")
    private WMGenericDao<BigdecOne2oneP, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigdecOne2oneP, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
     public Page<BigdecOne2oneP> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneP create(BigdecOne2oneP bigdecone2onep) {
        LOGGER.debug("Creating a new bigdecone2onep with information: {}" , bigdecone2onep);
        return this.wmGenericDao.create(bigdecone2onep);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneP delete(BigDecimal bigdecone2onepId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bigdecone2onep with id: {}" , bigdecone2onepId);
        BigdecOne2oneP deleted = this.wmGenericDao.findById(bigdecone2onepId);
        if (deleted == null) {
            LOGGER.debug("No bigdecone2onep found with id: {}" , bigdecone2onepId);
            throw new EntityNotFoundException(String.valueOf(bigdecone2onepId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecOne2oneP> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bigdecone2oneps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public Page<BigdecOne2oneP> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bigdecone2oneps");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneP findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding bigdecone2onep by id: {}" , id);
        BigdecOne2oneP bigdecone2onep=this.wmGenericDao.findById(id);
        if(bigdecone2onep==null){
            LOGGER.debug("No bigdecone2onep found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bigdecone2onep;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllO2M_O2OTransactionManager")
    @Override
    public BigdecOne2oneP update(BigdecOne2oneP updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bigdecone2onep with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getBigdecId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "AllO2M_O2OTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


